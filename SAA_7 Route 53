### DNS
- Domain name System
- 도메인으로 접속하면 IP를 받아서 사이트 접속
- 계층적 이름 구조가 있음
	- .com
	- api.example.com
- 도메인 등록자: Amazon, Route53 등등
- 도메인 레코드
- zone file: DNS 레코드 포함
- Name Server: 호스트 이름과 IP 또는 주소를 일치 시킴, 쿼리 이용
- Top Level Domain(TLD): 최상위 도메인, com, us, in gov, org 등등
- Second Level Domain(SLD): amazon.com, google.com
- 서브 도메인: www.example.com 까지 서브 도메인
- 도메인 네임: api.www.example.com
- 프로토콜: http
- FQDN: http://api.www.example.com

### DNS 작동 원리
- web 브라우저에서 url 요청 -> 로컬 DNS 서버에서 해당 도메인 정보를 확인 후 (ICANN에서 정보 확인 후 ip를 리턴해줌) -> 로컬 DNS는 최상단 DNS 서버에 TLD 요청 후 리턴 -> 로컬 DNS 가 SLD 요청 후 리턴
- ![[Pasted image 20231102111712.png]]

### Route 53
- 고가용성, 확장성을 갖춘 DNS
- SLA가용성을 제공하는 서비스
- 도메인 레코드
	- Domain/subdomain Name: example.com
	- Record Type: A or AAA
	- Value: 123.456.789.123
	- Route Policy: Route 53이 쿼리에 응답하는 방식
	- TTL: DNS리졸버가 레코드에 캐싱되는 시간
- 지원하는 DNS 레코드 타입
	- **A/ AAA / CNAME / NS** -> 중요
	- CAA / DS / MX / NAPTR / PTR / SOA / TXT /SPF / SRV -> 고급
### Route 53 레코드 종류
- A: 호스트 명과 IPv4를 연결
- AAA: 호스트명과 IPv6를 연결
- CNAME: 호스트명을 다른 호스트 명과 연결
	- 대상 호스트는 A나 AAA 레코드를 필수로 가져야 함
	- DNS 이름 공간 (탑 노드 )또는 Zone Apex 에 생성할 수 없음
		- example.com에 만들 수 없지만 www.example.com에 만들 수 있음 
- NS: 서버의 DNS 이름 또는 IP주소로 호스팅 존에 대한 DNS쿼리를 응답할 수 있음


### 호스팅 존
- 도메인과 서브도메인으로 가는 트래픽의 라우팅 방식을 정의
- 퍼블릭 호스팅 존
	- 이름을 살 때마다 만들 수 있음
	- 쿼리에 도메인 이름 IP를 알 수 있음
- 프라이빗 호스팅 존
	- 공개되지 않은것을 제공  VPC만 알고 있음 -> 사내 IP 등
- Route 53은 무료가 아님



### TTL
- 설정한 시간동안 동안 캐시릉 가지고 있다면 Route 53으로 요청하는 빈도가 줄어들음
- 캐시 설정한 시간 동안 다시 요청하지 않기 때문
- 캐시가 유지되는 동안에는 DNS 최종 IP를 변경해도 바로 반영되지 않을 수 있음
- DNS가 어떤 고정 IP를 바라보는지 저장하는 캐시 생명 시간

### CNAME vs Alias(별칭)
- CNAME: 호스트 이름이 다른 호스트 이름을 바라볼 수 있음
	- **루트 도메인이 아닌 경우만 가능**
		- somthing.mydomain.com은 가능하나 mydomain.com은 불가
	- app.mydomain.com -> blabla.anything.com 바라보도록
	- 
- Alias:
	- Route 53에 한정
	- 호스트 명이 AWS 리소스를 바라볼 수 있음
		- app.mydomain.com -> blabla.amazonaws.com 바라보도록
	- **루트 도메인, 비루트 도메인 모두 가능**
		- mydomain.com 가능
	- 무료, 자체 상태 확인 가능
	- CNAME과 달리 Zone Apex라는 DNS 네임스페이스의 상위 노드로 사용 될 수 있음
		- example.com
	- A/AAA만 가능 (IPv4, IPv6)
	- **TTL은 사용 불가**
	- 대상
		- ELB
		- CloudFront distributuion
		- API Gateway
		- Elastic BeanStalk environments
		- S3 Websites
		- VPC Interface Endpoints
		- Global Accelerator accelerator
		- Route53 record in the same hosted zone
		- **EC2의 DNS 이름은 별칭 레코드의 대상이 될 수 없음**

### Route 53 정책
- DNS관점의 라우팅
	- DNS는 DNS 쿼링만 응답함, 트래픽은 DNS를 통과하지 않음
- 정책
	- 단순
		- 트래픽을 단일 리소스로 보내는 것
		- 도메인 -> IP 주소
		- 클라이어트에서 다중 요청도 가능한데 이 경우 클라이언트는 무작위로 리턴된 것 중 하나의 IP를 선택함
	- 가중치 기반(Weighted)
		- EC2가 가중치를 각각 할당 받아 확률 만큼 자주 조회 -> 트래픽 양을 가중치 별로 조정
	- 장애조치
		- 장애가 난 인스턴스 헬스 체크 후 정상 인스턴스로 리턴
	- 지연시간 기반
		- 유저가 가장 가까운 AWS로 붙는데 걸리는 시간을 기반으로 함
		- 응답이 빠른 리전으로 연결됨
	- 지리적
		- 가장 정확한 위치가 선정되어 연결됨
		- 지리적 접근성
			- 해당 정책으로 편향값을 사용해 특정 위치를 기반으로 리소스를 더 많은 트래픽을 이동하는 것
			- 리소스 대상
				- aws 리소스 -> 자동으로 라우팅 계산 가능
				- 위도와 경도 지정
			- 편향이 없으면 가까운 리전으로
			- 편향이 있으면 양수 편향값을 가진 리전으로 더 많은 사용자 범위가 넓어져 트래픽이 높아짐(가중치가 높아지는 느낌)
	- 다중 값 응답
		- 다중 값 리턴해서 상태가 최종 상태를 바라봄
		- 최소와 최대 레코드 선택 기준이 있어서 선택한 대로 결정됨
		- 레코드는 인스턴스와 연결됨 
		- 조건이 여러개 일 때 우선순위가 있는 느낌
	- IP기반 라우팅
		- 사용자를 위한 CIDR목록을 Route53에 설정
			- CIDR 블록이 1,2,3,4면 로케이션 1로 보내고
			- CIDR 블록이 5,6,7,8면 로케이션 2로 보내고
			- 하는 방식으로 설정 가능
		- 특정 인터넷이 어떤 IP셋을 사용한다면 해당 으로 

### Route 53 Health Check
- 상태 체크는 **퍼블릭 리소스** 만 가능
- 종류
	- 공용 엔드 포인트 활용
		- 비정상 상태 확인
		- 간격 설정 가능
		- 임계값 설정 가능
		- 상태 확인은 로드 밸런서에게 2xx나 3xx 를 받아야 성공으로 간주
	- 계산된 상태 확인
	- CloudWatch 경보 이용
- 여러개의 상태 확인 결과를 하나로 합칠 수도 있음
	- 상위 헬스체크
	- Or, AND, NOT 사용 가능
	- 웹사이트 등에 이용
- 개인 인스턴스 헬스 체크
	- 개인 엔드포인트에 접근이 어려움 -> CloudWatch를 만들어서 경보를 이용함

 ### 도메인 레지스트라 vs 도메인 서비스
 - 도메인 레지스트라: DNS 레코드를 관리할 수 있는 곳이 존재
 - 타사 도메인(GoDaddy 같은 것) -> 내 도메인 주소 사용했던 거 같은 방법
 - 도메인을 해당 사이트에서 연결해줘야 함 -> Route 53의 기능은 사용할 수 있음
	 - 공용 호스팅 서버를 세팅 후 Route53 레지스트라에 업데이트 필요

