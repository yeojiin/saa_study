### AWS 예산 설정
- 계정에서 bill에서 설정
### EC2
- 서비스형 인프라 스트럭처
- EBS에 저장 가능
- ELB로 로드 분산 가능
- ASG 오토 스케일링 그룹을 통해 서비스 확장
- 리눅스, 윈도우, 맥에서 사용 가능
- CPU, RAM, 용량 선택 가능
- 하드웨어 연결 가능
- 네트워크 종류 선택 -> 속도, 어떤 IP
- 방화벽
- 부트 스트랩 스트립트
- 원하는 가상 머신을 선택해서 사용할 수 있음
### 부트스트랩 스크립트(EC2 사용자 데이터)
- EC2가 실행될 때 명령을 시작하는것
- 처음 시작할 때 사용되고 이후에는 사용되지 않음 -> 부팅 작업을 자동화하기 때문에 `부트스트래핑`
	- 소프트웨어 및 플러그인 설치
	- 필요한 파일 인터넷에서 다운로드
- **루트 계정에서 실행됨** -> 명령어는 sudo 사용
- 부팅 시 사용자 데이터를 root 로 실행 해서 sudo 사용
### EC2 인스턴스 유형
-  m5.2xlarge
	- m: instance class -> 범용 인스턴스
	- 5: generation
	- 2xlarge: size within the instance class -> 클수록 더 많은 메모리와 CPU를 가짐
- 범용 인스턴스(general purpose): 
	- 웹 서버나 코드 저장소 같은 다양한 작업에 적합
- 컴퓨팅 인스턴스(compute Optimized):
	- compute-intensive(컴퓨터 집약적인 작업)에 최적화
	- high performance processor(고성능 프로세서): 일부 데이터의 일괄 처리, 미디어 트랜스코딩 작업 시 혹은 고성능 웹 서버, HPC(high performance computing) 작업, 머신 러닝, 전용 게임 서버
	- HPC 작업 및 게임 등
	- 이름이 C로 시작
- 메모리 최적화 인스턴스(memory optimized):
	- `메모리(RAM)`에서 대규모 데이터셋을 처리하는 유형
	- 인메모리 데이터베이스가 되는 고성능 관계형 또는 비관계형의 (relational/non-relational) DB를 사용
	- distributed web scale cache store 분산 웹스케일 캐시 저장소 -> ex)elastic cache
	- in-memory db optimized for BI(business intelligence) BI에 최적화된 `인메모리 DB`와 real-time processing of big unstructured data 대규모 비정형 데이터의 실시간 처리
	- R 또는  Z로 시작
- 스토리지 최적화(storage optimized)
	- storage-intesive tasks to large data sets on `local storage`
	- 고주파 온라인 트랜잭션 OLTP
	- relational & NoSQL DB 
	- cache for in-memory db -> redis
	- distributed file systems (분산 파일 시스템)
	- I, D, H1로 시작
### EC2 방화벽
- 보안그룹 
	- EC2 인스턴스에 들어오고 나가는 **트래픽 제어**
	- 허용 규칙으로 출입을 허용하는데 대상은 IP주소, 컴퓨터의 위치, 다른 보안 그룹 등
	- 
- 보안 그룹임
- 보안 그룹 -> 출입 허용 규칙(IP 참조)
- EC2 인스턴스의 방화벽(firewall) 역할을 함
	- 포트로 통제
	- IPv4, IPv6 확인
- 인바운드는 안으로 들어오는 트래픽을 통제, 아웃바운드는 기본적으로 모든 트래픽을 허용 : 방화벽
- 보안 그룹
	- 여러 인스턴스에 연결 가능
	- **지역과 VPC의 결합**으로 둘 중 하나를 변경하면 새로 보안 그룹을 생성해야함
	- 보안 그룹은 EC2 외부에 있음 -> 외부 방화벽
	- **SSH 액세스를 위해 하나의 별도 보안 그룹을 유지하는 것을 권장
	- tiem out 또는 pending 은 보안 그룹(방화벽)에서 막힌 것, connection refused는 방화벽은 통과했으나 어플리케이션 문제이거나 실행되지 않은 것
	- 기본적으로 인바운드는 제한되고, 아웃바운드는 모두 허용됨
	![[Pasted image 20231024145751.png]]
	보안 그룹 1을 보안 그룹 1과 2의 권한이 있다면 IP는 신경쓰지 않고 EC2중 보안그룹 1과 2를 사용하는 인스턴스는 모두 접근 가능함
### SSH
- 22 포트: SSH 리눅스 인스턴스에 접속
- 21 포트: FTP 파일 공유 시 이용
	- 22 포트: SFTP일 때 SSH를 사용해 업로드 하기 때문
- 80 포트: HTTP 일 때 보안이 되지 않은 사이트에 엑세스
- 443 포트: HTTPS 보안된 사이트 액세스
- 3389 포트: 원격 데스크톱 프로토콜인 RDP  포트 -> 윈도우 인스턴스에 로그인 할 때 사용

### SSH 개요
![[Pasted image 20231024150928.png]]
EC2 Instance Connect는 웹 브라우저로 EC2 인스턴스 연결

#### SSH
- 터미널이나 명령줄을 이용해 원격 머신이나 서버를 제어 -> 22포트 허용
- pem키는 공백을 제거 후 원하는 디렉토리로 이동
-  /Users/yeon/jylim/12cm/pem/study/aws-course 
- ssh -i EC2Tutorial.pem ec2-user@43.201.8.206
- ssh 접속 후 aws configure에 액세스 키와 비밀번호를 입력하는 것은 최악
- IAM role을 추가하지 않으면 aws iam list-users가 작동하지 않음 
	-  Role 탭으로 들어가서 DemoRoleForEC2에서 IAMRead~~ 정책을 추가해주어야 명령어가 정상 작동
	- 위처럼 configure을 수정하는 것이 아니라 역할을 추가해주는 방식으로 유지보수 해야함
- ssh 접속 트러블 슈팅
	- 연결 시간이 초과 -> 보안그룹(빙화벽) 22 port 확인
	- coneection refused -> 인스턴스 재시작, amazon linux 2에서 비교적 에러가 적음
	- 이전에 접속 됐다가 안되는 경우는 인스턴스를 재식작해 public IP가 변경된 경우
### EC2 instance connect
- 임시 SSH를 사용해 iterm 같이 콘솔에서 접속할 수 있음
- SSH 기반이기 때문에 22번 포트는 열려 있어야 함
### ⭐️ EC2 purchasing option 
- 사용한 만큼(on-demand): 
	- 단기 워크로드를 사용
	- 애플리케이션의 거동을 예측할 수 없을 때 추천
	- 사용한 만큼 청구
- 예약(reserved) 인스턴스를 사용할 경우 장기 워크로드 사용 가능
	- 시간이 지난 뒤 인스턴스 유형이 변경될 경우 -> 유연한 인스턴스 타입
	- 할인이 적용됨
	- 선결제, 부분 선결제 등이 있고 예약이라 할인이 됨
	- DB 같은 경우에 사용
	- 전환형 예약 -> 유연성이 있음
	- 확실히 사용할 경우 사용
- 절약 플랜(saving plans)
	- reserved를 사용하다가 특정 타입을 변경하고 싶을 경우 절약플랜(namo -> large로 잠시 바꾸고 싶다 등)
	- 특정한 사용량으로 유지
	- 장기간 사용 시 할인
	- 1년 ~3년 
	- 사용 한도를 넘어서면 온디맨드로 청구
- 스팟 인스턴스: 단기성으로 사용하여 저렴하지만 신뢰성이 낮음
	- 가장 할인율이 큼, 경매 방식
	- 비용이 넘어가게 되면 인스턴스가 삭제되기 때문에 비효율
	- 배치, 데이터분석, 이미지 처리, 등 분산형(distributed) 워크로드에 적합
	- DB등에 적합하지 않음
- 전용 호스트(dedicated hosts): `물리적(physical) 서버` 전체를 이용해서 하드웨어 공유하지 않음
	- 인스턴스 실행을 전담하는 **실제 호스트 비용을 지불**
	- 법규 준수 요건이 있음
	- **소켓, 코어, vm software별 라이센스를 가져와 비용을 절감함**
	- 라이선스와 함께 제공, BYOL(bring your own license)
	- 가장 비쌈
	- 고객이 서버를 미리 선택하고 그 서버는 해당 고객의 인스턴스만 운영, `호스트 과금`
	- 고객이 어떤 물리적 서버를 구매하는 지 선택
- 전용 인스턴스(dedicated instance): 
	- 사용자의 전용 하드웨어에서 실행되는 인스턴스
	- 같은 계정에서 다른 인스턴스와 함께 하드웨어를 공유할 수 있지만 인스턴스 배치에는 통제관이 없음
	- 고객이 인스턴스를 생성하면 AWS에 의해 할당된 서버는 해당 고객만 사용 가능, `인스턴스 과금 + 리전 요금`
	- **전용 인스턴스와 호스트에 차이가 있음 -> 물리적 하드웨어
		- 전용 인스턴스는 자신만의 인스턴스를 자신만의 하드웨어에 갖는 것
		- 전용 호스트는 물리적 서버 자체에 대한 접근권을 갖고 낮은 수준의 하드웨어에 대한 가시성을 제공
	- **물리적 서버는 aws가 선택하고 수행**
- 용량 예약(capacity reservation): 원하는 기간동안 특정한 AZ에 온디멘드를 예약할 수 있음
	- 기간 약정이 없음
	- 할인 없음
	- 인스턴스 실행 여부와 상관없이 온디맨드 기준으로 지불해야함 -> 쓸지 안 쓸지 모르지만 일단 확보해두는 것
	- 단기적이고 중단 없는 워크로드에 적합
### 스팟 인스턴스 및 스팟 집합
- 온디맨드보다  저렴
- `max spot price` 설정, currnet spot price < max spot price 가 되면 인스턴스 유지
- 시간당 스팟
	- 용량이 넘어가면 2분의 유예기간 뒤 인스턴스 중지
- 스팟 블록
	- 지정된 기간 동안 스팟 인스턴스 차단 -> 중단 없이 블록을 사용할 수 있음
- 배치, 데이터 분석, 장애 복원력이 뛰어난 워크로드 등에 사용
### 스팟 인스턴스 종료
- 스팟 요청: 원하는 인스턴스 수, 최대 가격, 시작 사양 등 설정
- 요청 유형
	- 일회성: 스팟이 요청되면 바로 시작되고 스팟 요청은 사라짐
	- 영구 인스턴스 요청: 스팟 요청이 유효한 기간동안 계속 유지, 따라서 인스턴스가 중단되더라도 가격이 맞으면 다시 요청이 활성화 되어 인스턴스가 자동으로 살아남
- 스팟 요청을 취소하려면 스팟 요청이 활성/비활성 상태여야 함(실패, 취소, closed는 불가)
- 스팟 요청이 종료된다고 인스턴스가 종료되는 것은 아님
	- `스팟요청을 취소하고 aws 인스턴스를 종료해야함` -그렇지 않으면 새로 계속해서 시작할 수 있음
### 스팟 플릿(fleet)
- 스팟  인스턴스 세트를 지정
- 다양한 런치 풀 중 적합한 것을 선택 -> 여러개 지정해둔 런치 풀 중 그 상황에 적합한 것 선택
- **스팟 플릿 전략
	- 최저 가격 -> 워크로드가 짧은 작업에 좋음
	 - 다양성(diversified): 정의한 모든 풀에 분산되어 스팟 인스턴스 실행 -> 가용성(availiability)과 긴 워크로드에 적합, 하나의 풀이 사라져도 다른 풀이 남아있어서 서비스가 유지됨
	 - 용량최적화(capacity optimized)
		 - 원하는 인스턴스에 맞게  큰것부터 작은것으로 사용
- **여러개의 런치를 사영할 수 있음, 최저가는 자동으로 낮은 비용을 선택**

 
