리전은 근처인 **서울**로 선택
- Route53으로 들어갈 경우 리전이 글로벌
- EC2로 들어가면 메인에서 선택한 리전으로(서울)로 선택되는데 같은 리전을 유지해야함
### IAM: Users & Groups
IAM:  identity and Access Management -> 계정 생성 시 사용 됨
root: root 계정은 기본으로 생성됨
User: 
- 그룹내에 속한 조직원 
- 그룹>사용자,
- 그룹에 포함되지 않은 사용자도 있음
- 사용자는 여러 그룹에 동시에 속할 수 있음
- 그룹에는 기능 권한을 부여할 수 있음
- json으로 스크립트를 작성해 권한을 부여할 수 있음
- 최소 권한의 원칙
group: 하나의 그룹은 다른 사용자 그룹에 포함될 수 없음
	
### IAM 사용자 생성
- 글로벌로 지정됨
- 오른쪽 상단 계정이 ID로 표시된다면 root 권한

root 계정으로 로그인 후 IAM에서 계정 생성 가능
- 그룹 생성 및 그룹 권한 설정이 가능
- IAM 계정은 root 아래 생성되는 계정으로 로그인 시 root 로그인 IAM 로그인이 구분되며 IAM 계정 로그인 시에는 입력창이 3개
- IAM 로그인 후 프로필 클릭 시 IAM 사용자: ~~ 라고 뜸
- root 로그인 후 프로필 클릭 시 계정 ID: ~~ 라고 뜸

### IAM 정책
- 그룹에 속한 권한이 있고, 그룹에 속하지 않은 개별 사용자에게 권한을 줄 경우 inline 권한이라고  함
- json 정책 파일
```
{
	"Version": "2012-10-17",
	"Id": "53-Account-Permission".   // 선택사항
	"Statement": [     // 필수
		{
			"Sid": "1",    // 문장 아이디(선택사항)
			"Effect": "Allow",    //Allow || Deny 로 접근 가능 여부
			"Principal": {   //계정/사용자/권한에 대해 어떤 정책이 적용 되는지
				"AWS": ["arn:aws:iam:123456789012:root"]  // 해당 예시는 루트 계정에 적용
			},
			"Action": [    //Effect에 기반해 정책 허용, 거부 API 호출 목록
				"s3:GetObject",
				"s3:PutObject"
			],
			"Resource": ["arn:aws:s3:mybucket/*""*"]  // 적용될 action의 리소스 목록 
		}
	]
}

// 위 예시에는 없지만 Condition이라는 항목도 있음 
// 언제 이 정책이 영향을 주는지에 대한 조건
```
**Effect, Principal, Action, Resource에 대해 정확히 알고 있어야 함**

### IAM MFA
IAM 보안 방어 매커니즘 2
- 비밀번호 정책
	- 비밀번호 생성 규칙
	- 비밀번호 만료 정책
	- 비밀번호 재사용 정책
	- 비밀번호 변경 허용/비허용 정책
- 다요소 인증  MFA
	- 필수
	- 루트는 필수 보호, IAM도 권장
	- 비밀번호 + 보안장치 함께 사용하는 것
	- 비밀번호 + mfa 토큰 등
	- 비밀번호를 해킹 당해도 물리 주소를 알아야 해서 위험이 적음
		- google authentication 사용 (가상 MFA)
			- 하나의 휴대폰에서만 사용할 수 있지만 여러 서비스 이용 가능
		- 범용 두 번째 인자, U2F (보안키)
			- 물리적 장치로 usb 등을 사용 -> 제3자가 제공
			- 하나의 키로 여러 사용자를 지원 가능
### AWS 접근 법
- 비밀번호 
- CLI: command line interface, protected by access keys
- SDK: software developer kit, for code: protected by access keys
- 엑세스 키는 관리 콘솔을 이용해 생성할 수 있고, 공유하면 안됨
### CLI
- aws 관리 콘솔 대신 사용 되기도 함
- 명령어로 aws  관리

### SDK
- sdk는 터미널을 통해 사용하는 것이 아닌 애플리케이션 안에 심어둬야 함
- 다양한 개발 언어 지원

?? 어플리케이션에 넣어서 SDK 사용하는경우?

### IAM Roles
- aws 서비스가 사용할 수 있는 권한
	- EC2 인스턴스로 가상 서버를 만든다면 EC2 인스턴스에 권한이 필요한데 그룹 권한처럼 서버가 사용할 수 있는 권한인 IAM Role을 만들어서 부여함
- aws 리소스가 무엇을 할 수 있는지를 정의하는 `자격증명서`
- 그룹에 권한을 바로 부여하는 대신, 역할을 만들고 **역할을 그룹이나 사용자에게 주는 방식**
- 다른 **사용자가 역할을 부여 받아 사용** -> `임시 보안 자격 증명`
	- 정책은 사용자, 그룹, 역할에 부여할 수 있음
- 사용자가 S3를 사용하고 싶은 경우?
	- 사용자가 S3 정책이 설정되어 있는가?
	- 사용자가 속한 그룹에 S3 정책이 설정되었는가?
	- S3 정책이 설정된 역할이 사용자에게 부여되었는가?

### IAM 보안 도구
- IAM 자격 증명 보고서 (계정 레벨)
	- 계정에 있는 사용자와 다양한 자격 증명 상태
- IAM 액세스 관리자(사용자 수준)
	- 사용자에게 부여된 서비스 권한, 해당 서비스에 마지막으로 엑세스한 시간
	- 최소 권한의 원칙
	- user - 상세 - 엑세스 관리자에서 확인 가능하며 접근한 서비스에 따라서 자주 이용하지 않는 서비스의 권한을 회수하는 것도 도움이 

### IAM 모범 사례
- root 계정 외 사용자 계정을 부여하는 것을 추천
- 하나의 AWS 사용자는 한명의 실제 사용자
	- 다른 사용자가 해당 AWS를 원한다면 새로운 자격 증명을 생성해서 사용자를 만들어 주는 것을 추천
- 사용자를 그룹에 넣어 그룹 권한을 부여해 관리 -> 그룹 수준에서 보안관리
- 비밀번호 규칙, MFA 이용
- 역할을 생성해서 관리 -> 사용자 또는 aws 서버 자체
- CLI/SDK에 사용되는 키 생성해서 사용하고 접근
-  IAM 자격 증명 보고서와 IAM 액세스 분석기를 이용해 관리

### IAM 요약
- IAM 사용자는 aws 실제 이용자 개인과 매핑
- 권한은 JSON문서를 첨부할 수 있음
- 역할
- 보안
- CLI/SDK
- IAM 자격증명 보고서 및 사용량 관리

### IAM
- IAM사용자 그룹은 기타 그룹에 포함될 수 없음
- IAM  정책 내 문장의 구성 요소
	- sid: 문서 아이디
	- effect: allow/deny 같은 명령어
	- principal: 어떤 사용자/계정/그룹 등에 어떤 정책이 적용 되는 지
	- action: 관리할 api 목록
	- resource: 관리할 대상
	- condition: 추가 조건
