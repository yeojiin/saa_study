### 데이터베이스 마이그레이션 서비스(DMS)
- 데이터베이스 시스템을 온프레미스 시스템에서 AWS Cloud로 마이그레이션하려 한다고 가정 -> 마이그레이션 서비스를 의미하는 DMS를 필요
- 데이터베이스를 온프레미스에서 AWS로 마이그레이션하게 해주는 빠르고 안전한 데이터베이스 서비스
- 복원력이 있고 자가 치유가 가능한다는 점이 장점이죠, 마이그레이션을 해도 소스 데이터베이스를 계속 사용할 수 있고, 다양한 유형의 엔진을 지원,
	- 예를 들어Oracle에서 Oracle로 혹은 Postgre에서 Postgre로 동종 마이그레인션도 되고요, 뿐만 아니라 Microsoft SQL Server에서 Aurora까지 이종 마이그레이션도 지원
	- CDC, 즉 Change Data Capture를 이용한 지속적 데이터 복제도 가능
- EC2 인스턴스를 만들어야 하고, 그 EC2 인스턴스가 대신 복제 작업을 수행함
- 소스 데이터베이스가 온프레미스에 있고 DMS 소프트웨어를 가진 EC2 인스턴스를 실행, 그  소스 데이터베이스에서 데이터를 계속적으로 가져오고 그걸 타깃 데이터베이스에 넣게 됨
- **소스**는 온프레미스 데이터베이스나 Oracle, Microsoft SQL Server, MySQL, MariaDB, PostgreSQL, MongoDB, SAP, DB2 같은 EC2 인스턴스 기반 데이터베이스 또는 Azure SQL Database 같은 Azure 데이터베이스
- Aurora 등 모든 Amazon RDS도 가능
- mazon S3와 DocumentDB도 가능
- **타깃**에도 다양한 선택지 존재
- 온프레미스와 EC2 인스턴스 데이터베이스, Oracle, Microsoft SQL Server, MySQL, MariaDB, PostgreSQL, SAP 등이 될 수 있고, Amazon RDS의 모든 데이터베이스가 될 수도 있음
- Redshift, DynamoDB, Amazon S3도 가능하고, OpenSearch Service, Kinesis Data Streams, Apache Kafka, DocumentDB, Amazon Neptune, Redis, Babelfish도 가능
- DMS를 이용하면 예를 들어 온프레미스 데이터베이스를AWS에서 제공하는 거의 모든 데이터베이스에 손쉽게 넣고, 내보내고, 마이그레이션할 수 있다는 개념이 중요
- 소스 데이터베이스와 타깃 데이터베이스의 엔진이 다른 경우에는 어떻게 될까?
	- AWS SCT를 사용해야 함, SCT는 스키마 변환 도구를 의미, 그게 데이터베이스 스키마를 엔진 간에 변환
	- OLTP를 사용한다면 SQL Server나 Oracle에서 MySQL, PostgreSQL 또는 Aurora로 마이그레이션을 할 수 있음
	- Teradata나 Oracle에서 Amazon Redshift로처럼 분석을 목적으로 변환할 수도 있음
	- 소스 데이터베이스의 엔진이 타깃 데이터베이스와 다르고 중간에는 DMS가 있음, 하지만 스키마 변환 도구 즉 SCT도 실행되고 있음
	- **동일한 데이터베이스 엔진 간에 마이그레이션을 할 때는SCT를 사용할 필요가 없음**
	- 온프레미스 PostgreSQL에서 RDS PostgreSQL로 마이그레이션한다면 데이터베이스 엔진이 PostgreSQL로 동일하기 때문에 그 경우에는 SCT를 사용하지 않음
	- Oracle에서 Postgre로 마이그레이션할 때는 SCT를 사용해야 함
	- 데이터베이스 엔진은 PostgreSQL이지만 RDS는 그 데이터베이스 엔진을 실행하기 위해 사용하는 플랫폼
- DMS에 지속적 복제를 어떻게 설정할까?
- 예를 들어 Oracle DB 같은 기업 데이터 센터를 소스가 갖고 있음, 그리고 MySQL DB를 위한 Amazon RDS 데이터베이스를 타깃으로 갖고 있음 두 가지 다른 유형의 데이터베이스를 갖고 있음
- 이 경우에는 스키마 변환 도구 SCT를 사용해야 해야 함
- AWS SCT를 설치하여 서버를 설정하고, 그걸 온프레미스에서 설정할 수 있음
-  이어서 MySQL을 실행하는 Amazon RDS 데이터베이스로 스키마를 변환
- DMS 복제 인스턴스를 설정할 수 있고요, 지속적 복제를 위해 그게 Full load와 Change Data Capture CDC를 함
- 온프레미스에서 소스 Oracle 데이터베이스를 읽어서 데이터 마이그레이션을 수행하고, 데이터를 여러분의 프라이빗 서브넷에 삽입
- 마이그레이션하는 데이터베이스의 종류가 다르다면 SCT를 사용해야 한다는 점이 중요!
- DMS에는 멀티 AZ 배포가 있음
- 한 AZ에 DMS 복제 인스턴스가 있고요, 그 인스턴스를 또 다른 AZ에 동기화 복제를 하게 되고, 그게 스탠바이 레플리카가 됨
- 하나의 AZ에서 고장이 발생했을 때 회복력을 갖게 되는 장점이 있죠, 또 데이터 리던던시를 갖게 되어서 I/O 멈춤 현상을 없애고 레이턴시 스파이크를 최소화할 수 있다는 장점
### RDS와 Aurora Migrations
- Aurora MySQL로 마이그레이션하는 방법
- RDS 데이터베이스를 Aurora MySQL로 옮기고자 할 경우 첫 번째 방법은 RDS MySQL 데이터베이스의 스냅샷을 생성해서 이 스냅샷을 MySQL Aurora 데이터베이스에서 복원하는 것
- 다운타임이 발생하겠죠 가동을 중지한 뒤 Aurora로 마이그레이션해야 하기 떄문
- 두 번째는 좀 더 지속적인 방법으로 Amazon Aurora 읽기 전용 복제본을 RDS MySQL에 생성하는 것
- 복제본의 지연이 0이 되면 Aurora 복제본이 MySQL과 완전히 일치한다는 뜻이니 이때 복제본을 데이터베이스 클러스터로 승격시키면 됨
- 데이터베이스 스냅샷보다는 시간이 많이 걸리고, 복제본 생성과 관련한 네트워크 비용도 발생할 수 있음
- MySQL 데이터베이스가 RDS 외부에 있는 경우에는 Percona XtraBackup 기능을 사용하여 백업할 수 있음
- 백업 파일을 생성하여 Amazon S3에 두면 Amazon Aurora의 기능을 사용해서 새로운 Aurora MySQL DB 클러스터로 백업 파일을 가져올 수 있음
- Percona XtraBackup에서만 사용할 수 있음
- mysqldump 기능을 MySQL 데이터베이스에서 실행하여 기존 Amazon Aurora 데이터베이스로 출력값을 내보내는 것
- 시간이 많이 들고 Amazon S3를 사용하지 않음
- 마지막 선택지는 Amazon DMS를 이용해서 두 데이터베이스가 가동되는 채로 이 데이터베이스 간 지속적인 복제를 진행하는 방법
- PostgreSQL에서도 방법은 같음
- RDS 쪽은 유사한 방법으로 스냅샷을 생성해 Amazon Aurora 데이터베이스에서 복원하거나 PostgreSQL의 읽기 전용 복제본을 Amazon Aurora에 생성하여 복제 지연이 0이 될 때까지 기다렸다가 데이터베이스 클러스터로 승격시킬 수 있음
- 외부 PostgreSQL 데이터베이스를 Aurora에 마이그레이션하는 경우 백업을 생성한 다음 해당 백업을 Amazon S3에 두고 데이터를 가져오기 위해 aws_s3 Aurora 확장자를 사용해서 새로운 데이터베이스를 생성하는 방법도 있음
- DMS를 통해 PostgreSQL에서 Amazon Aurora로 지속적 마이그레이션이 가능
### AWS를 통한 온프레미스 전략
- 클라우드에서의 온프레미스 전략 중요!
- Amazon Linux 2 AMI를 가상 머신으로 다운로드 할 수 있고, 이건 ISO 형식
- 이 ISO 이미지를 흔한 VM을 생성하는 소프트웨어로 로드할 수 있음
- Oracle VM과 Microsoft Hyper-V에 해당하는 VMWare, KVM Virtual Box를 포함
- VM을 통해 온프레미스 인프라에서 Amazon Linux 2를 실행할 수 있게 됨
- 사용자 데이터로도 이걸 작동할 수가 있다는 뜻
- VM 가져오기와 내보내기 기능이 있는데 이 기능을 통해 기존의 VM과 애플리케이션을 EC2로 마이그레이션 할 수 있음
- 재해 복구 리포지토리 전략도 생성할 수 있음
- 온프레미스 VM이 많은 경우 이를 클라우드에 백업하고 싶을 때 가져오기, 내보내기 기능을 통해 VM을 EC2에서 온프레미스 환경으로 다시 빼올 수도 있음
- AWS 애플리케이션 Discovery Service는 온프레미스의 정보를 모아주고 마이그레이션을 계획할 수 있게 해 주는 서비스
- 상위 수준의 서비스이지만 서버 사용량 정보와 종속성 매핑에 대한 정보를 제공하죠 온프레미스에서 클라우드로 대량의 마이그레이션 할 때 유용
- AWS Migration Hub를 사용해서 모든 마이그레이션을 추적할 수도 있음
- AWS data Migration Service, DMS는 온프레미스에서 AWS로의 복제를 허용하고, AWS에서 AWS로, AWS에서 온프레미스로 복제를 허용
- MySQL나 Postgres 데이터베이스가 온프레미스에 있고, AWS로 워크로드를 옮기고 싶다면 DMS를 써서 그동안 데이터베이스를 복제하고 준비가 됐을 때 AWS만을 사용해서 처리할 수 있기 때문
- Oracle, MySQL DynamoDB 등 다양한 데이터베이스들과 함께 작동해서 사용하기에 편리
	- MySQL에서 DynamoDB로 데이터를 마이그레이션 하는 등
- SMS, 즉 AWS Server Migration Service가 있음
- 온프레미스의 라이브 서버들을 AWS로 증분 복제할 때 쓰는데 AWS로 볼륨을 직접 복제할 수 있음
- 지속적인 복제 유형에 적용되는 증분 복제
- 온프레미스에서 AWS로의 마이그레이션
- 온프레미스에서 가능한 것은 온프레미스와 EC2에 대한 VM 가져오기와 내보내기가 있었고, 애플리케이션 Discovery Service AWS와 같은 마이그레이션 서비스 Migration Hub DMS, SMS 등의 서비스
### AWS 백업 - 개요
- AWS Backup은 완전 관리형 서비스이며 AWS 서비스 간의 백업을 중점적으로 관리하고 자동화할 수 있게 도와줌
-  실제 중앙 시스템이 없고, 사용자 지정 스크립트나 매뉴얼을 만들 필요도 없이 백업 전략으로AWS Backup을 생각해 볼 수 있음
- 예를 들어 Amazon EC2, EBS, Amazon S3, RDS 및 모든 데이터베이스 엔진이 지원되고, Aurora, DynamoDB, DocumentDB Amazon Neptune, EFS, 그리고 Lustre와 Windows 파일 서버를 포함하는 FSx가 지원되며 AWS Storage Gateway의 볼륨 게이트웨이 등으로 시간이 지나면 더 늘어남
- 리전 간 백업을 지원하므로 한 곳의 재해 복구 전략을 다른 리전에 푸시할 수 있음
- 계정 간 백업도 지원
- AWS에서 여러 계정을 사용할 경우에 도움이 됨
- Aurora와 같은 지정 시간 복구(PITR)를 지원하고, 온디맨드와 함께 예약된 백업을 지원
- 태그 기반 백업 정책이 있음
	- 예를 들어  프로덕션 태그가 지정된 리소스만 백업할 수 있음
- 백업 정책에서 백업 플랜(Plan)도 만들 수 있음
- 백업 빈도를 정의하여 예를 들어 매 12시간 또는 매주, 매달 및 cron 표현식을 정하고 백업 기간도 지정
- 백업을 콜드 스토리지로 이전할지 여부도 결정
- 백업 보유 기간도 정함
- 계속 보유하거나 일, 주, 월 년으로 기간을 정할 수 있음
- 포괄적인 범위와 대부분의 서비스를 지원
- 즉, AWS 서비스에 유용한 추가 기능이라고 할 수 있음
- AWS Backup 과정을 살펴보면 백업 플랜을 만들고 나서 여러분에게 중요한 특정 AWS 리소스를 할당
- 할당이 완료되면 데이터가 자동으로 Amazon S3에 백업됨
- AWS Backup에 지정된 내부 버킷에 백업
- AWS Backup에서 알아둘 또 다른 기능은 볼트(Vault) 잠금
- WORM(Write Once Read Many) 정책을 시행하면 백업 볼트(Vault)에 저장한 백업을 삭제할 수 없게 됨
- 볼트 잠금 정책 덕분에 백업을 삭제할 수 없으며 여러분의 백업에 대한 추가 방어막을 제공하죠 예를 들어 의도치 않거나 악의적인 삭제 작업을 막고, 백업 유지 기간 축소 또는 변경 작업을 방지
- 기능이 활성화되면 루트 사용자 자신도 백업을 삭제할 수 없음
- 백업의 안전성을 강력하게 보장
### Application Migration Service (MGN)
- 클라우드로 이동하는 것에 대해서는 사용 사례가 두 개 있음
- 예를 들어 새롭게 시작하면서 클라우드를 바로 활용하고 싶은 경우라면 마이그레이션할 필요는 없음, 하지만 온프레미스 서버나 데이터 센터가 있어서 클라우드로 마이그레이션하려면, 마이그레이션을 계획해야 함
- 한 가지 방법은 AWS Application Discovery 서비스로 마이그레이션을 계획하는 것
- 서버를 스캔하고 마이그레이션에 중요한 서버 설치 데이터 및 종속성 매핑에 대한 정보를 수집 -> 어떻게 마이그레이션할지, 무엇을 먼저 마이그레이션할지 알 수 있음
- 마이그레이션은 두 가지 방법으로 할 수 있는데 하나는 Connector를 사용하는 Agentless Discovery
- 가상 머신, 구성, CPU와 메모리 및 디스크 사용량과 같은 성능 기록에 대한 정보를 제공
- 또는 Application Discovery 에이전트를 실행할 수도 있음
- 가상 머신 내에서 더 많은 업데이트와 정보를 얻을 수 있음
- 예를 들어, 시스템 구성, 성능, 실행 중인 프로세스, 시스템 사이의 네트워크 연결에 대한 세부 정보 등을 얻을 수 있음, 종속성 매핑을 얻는 데 좋음
- 모든 결과 데이터를 AWS Migration Hub라는 서비스에서 볼 수 있음
- 이 Application Discovery 서비스는 이동해야 할 항목과 그것들이 내부적으로 어떻게 상호 연결되어 있는지 파악하기에 정말 유용
- 온프레미스에서 AWS로 이동하는 가장 간단한 방법은, AWS Application Migration Service, 즉 MGN이라는 걸 사용
- AWS Application Migration Service, MGN을 사용하여 리호스팅을 할 수 있음
- Lift-and-shift 솔루션이라고도 하는 건데요, 물리적, 가상, 또는 클라우드에 있는 다른 서버를 AWS 클라우드 네이티브로 실행하는 것
- OS, 앱, 데이터베이스가 있는 회사 데이터 센터가 있고, 디스크에서 실행된다고 가정
	- Application Migration Service를 실행하면 데이터 센터에 설치된 복제 에이전트가 디스크를 연속적으로 복제
	- 예를 들어, 저비용 EC2 인스턴스, EBS 볼륨이 데이터 복제를 갖게 됨
	- 컷오버를 수행할 준비가 되면, 스테이징에서 프로덕션으로 이동할 수 있음
	- 원하는 크기의 더 큰 EC2 인스턴스와 여러분이 필요한 성능에 맞는 EBS 볼륨을 갖게 되는 것
	- 즉, 데이터를 복제한 다음 어느 시점에서 컷오버를 수행하는 것
- 이 방법은 광범위한 플랫폼, 운영 체제, 데이터베이스를 지원하고요, 다운타임도 최소
- 이 서비스가 자동으로 수행하니까 관련 엔지니어를 고용할 필요가 없기 때문에 비용도 절감
### 대규모 데이터 세트를 AWS로 전송
- 대규모 데이터를 AWS로 전송하는 방법과 여러 제약에 따른 최적의 방식이 무엇인지에 대해간단히 요약
- 예를 들어 200TB의 데이터를 클라우드로 옮기고 싶다고 가정
- 현재 인터넷 연결 속도는 100 Mbps
- 공용 인터넷을 사용하는 방법이 있고 역시 또 공용 인터넷을 사용해 사이트 간 VPN을 설치하는 방법도 있음
- 장점은 설치가 빠르고, 바로 연결이 가능
- 빠르게 계산해 보면 200TB를 GB로 그다음 MB로 변환한 다음 Mb로 변환을 하니 8배를 곱함
- 그리고 보유하고 있는 속도를 나눠서 100Mbps라면 1천6백만 초이니 185일이 소요
- 인터넷 연결이 100Mbps라면 200TB의 데이터를 보내는 데 반년이 걸리는 셈
- Direct Connect를 통해 보내고 싶다면 연결 라인을 통해 1Gbps로 프로비저닝한다고 했을 때 먼저 초기 설치에 시간이 오래 걸리는 것을 감안해야 함
- Direct Connect를 사용한다면 먼저 연결을 만드는 데에만 한 달 정도가 걸릴 수 있고, 연결이 만들어진 후에 첫 번째 연결보다는 10배 정도 빠름 -> 18.5일 정도
- Snowball을 쓰면 얼마나 걸릴까?
- Snowball을 2~3개 주문
- 퍼실리티(facility)에 동시에 도착하도록 병렬 주문
- 약 일주일이 소요되게 됨
- Snowball이 도착해서 로드하고 다시 싣고, AWS로 보내져서 데이터가 송신되어 종단 간 전송에 일주일 정도가 걸리는 것
- Snowball을 통해 전송되고 있던 데이터베이스가 있었다면 DMS와 결합하여 나머지 데이터를 전송할 수 있음
- 일회성 전송이었고 지속적 복제에 대해서는 Site-to-Site VPN 등의 기술을 사용할 수 있음
- 지속적 복제에서는 당장 전송할 데이터양이 적기 때문
- Direct Connect나 DMS 또는 방금 본 DataSync 등의 서비스를 사용
- 데이터의 송수신을 도와주고 지속적이든 아니든 사이트 간 VPN이나 Direct Connect처럼 적합한 인터넷 라인을 통해 송신을 가능케 함
- Snowball은 대용량 일회성 전송에 더 많이 사용
- Snowball은 AWS로 첫 번째 데이터를 보내는 속도를 올리기 아주 유용
- 가장 쉽고 빠르고 안정적으로 AWS에 데이터를 보내는 방법은? -> 데이터셋의 크기에 따라 답이 달라짐
### VMware Cloud on AWS
- 온프레미스에 데이터 센터가 있을 때 VMware Cloud로 데이터 센터를 관리하는 경우가 있음
- vSphere 기반 환경과 가상 머신을 VMWare Cloud를 통해 관리
- VMware에 데이터 센터가 있는 고객은 데이터 센터의 용량을 확장하고, 클라우드와 AWS를 모두 사용하고 싶어 함
- 하지만 데이터 센터와 클라우드를 관리하는 데에는 계속 VMware Cloud를 이용하고 싶을 수 있음
- VMware Cloud on AWS의 핵심임
- 이 서비스를 이용하면 전체 VMware Cloud의 인프라를 AWS에서 확장함으로써 vSphere, vSAN, NSX 등에서 사용할 수 있음 -> VMware의 하위 서비스
- 첫 번째 사례로는 컴퓨팅 성능을 확장하여 데이터 센터에서 클라우드뿐 아니라 스토리지까지 컴퓨팅이 가능해져 VMWare 기반 워크로드를 AWS로 마이그레이션할 수 있다는 것
- 또한 프로덕션 워크로드를 여러 데이터 센터 간 실행할 수 있고, 프라이빗, 퍼블릭, 하이브리드 클라우드 환경 모두 가능
- 그리고 마지막으로 재해 복구 전략으로도 활용할 수 있음
- 익숙한 소프트웨어 제품군을 이용해서 신속하게 클라우드에 액세스할 수 있기 때문
- 그리고 AWS 클라우드를 사용하므로 다양한 AWS 서비스를 이용할 수 있음
- Amazon EC2, Amazon FSx, S3, RDS Direct Connect, Redshift 등
