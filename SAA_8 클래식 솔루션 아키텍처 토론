### WhatIsTheTime.com 
무상태 어플리케이션 -> 시간을 알려주는 어플리케이션이 있음
-   탄력적 IP로 사용자들에게 변하지 않는 공용 IP를 제공
-   다운 타임을 제거하기 위해 수평/수직 확장이 필요 -> 부하 처리
	-   사용자가 많아져 수직 확장
-   더 많은 사용자그룹이 많아져 수평 확장을 해 인스턴스 수를 늘림
-  너무 많은 사용자들이 탄력적IP를 가져야 함으로 어려워짐
- Route53을 이용해 사용자들이 Route53에 쿼리 접속하면 TTL을 이용해 인스턴스에 접근
	- 관리할 탄력적 IP도 없어짐
- 어떤 인스턴스가 종료될 경우 특정 그룹이 어플을 사용하지 못함
- 로드밸런서를 추가해서 상태 확인으로 장애가 난 인스턴스를 무시하고 서비스 안정성 확보
	- 보안 그룹을 가지고 접근해서 더욱 안정화
- 별칭 레코드를 사용해 ELB와 연결 가능
- 하지만 수동으로 인스턴스를 추가 삭제가 어려움
- 오토 스케일링을 이용함
- 사용자의 부하에 따라 인스턴스 수가 조절됨
- 가용 영역 1번이 다운됨 -> 지진 등으로
- 다중 AZ를 사용함 -> 리전이 다운되도 다른 리전의 서비스 이용 가능
- AZ의 용량을 예약하면 비용을 줄일 수 있음, 스팟 용량을 사용해도 되긴 함

### MyClothes.com
상태 유지 어플리케이션 -> 커머스 웹일 경우, 외부 연동 등이 필요할 수 도 있음
- 세션 유지가 필요함 -> 장바구니 등으로 인해
- 사용자의 쿠키를 확인해야할 필요가 있음 -> 쿠키의 양이 커지면 쿠키로 확인하기 어려움
- 그래서 세션을 사용함
	- 엘라스틱 캐시 사용 -> 공격자들이 공격할 수 없어서 더욱 안전함
- 읽기와 쓰기 전용 RDBS를 나눌 수 있음 -> 더 오래된 정보를 저장하기 위해
- 캐시의 유지보수가 필요함
- 재해 대비를 위해 AZ 이용

### MyWordPress.com
완전히 확장된 서비스
- WordPress를 AWS에 배포하길 원함
- RDS 계층 생성이 필요함
	- 오로라 Mysql을 사용해서 확장할 수 있음
- 이미지 저장이 필요함
	- 단일 AZ의 EBS 볼륨을 생성
	- 이미지 저장이 EBS에 됨
- 단일 AZ EBS를 다중으로 변경
	- 문제가 발생할 수 있음 다른 이미지 로드 되는 등
- EFS를 가져옴 
- ENI를 설정해서 EFS를 접근하면 다중 인스턴스가 있더라도 같은 이미지가 노출될 수 있음
	- 각각의 ENI가 EFS를 통해서 이미지를 꺼내오기 때문에 -> 분산 어플리케이션
- EFS가 다중 AZ를 사용할 때비용적으로 EBS 보다 저렴함

### 어플리케이션을 빠르게 인스턴스 화
- EC2 인스턴스에 Golden AMI를 만들어서 빠르게 AMI생성할 수 있음
	- OS등이 미리 설치되어 빠르게 인스턴스를 올릴 수 있음, 재설치 등이 필요 없기 때문에
- RDS 데이터베이스
- EBS 볼륨
	- 사용자 데이터베이스 스냅샷

### BeanStalk
- 개발자 입장에서 어플리케이션을 AWS에 배포
- 하나의 인터페이스에서 EC2, ASG, ELB, RDS 등 모든 컴포넌트를 재사용
- 용량 프로비저닝, 로드 밸런서 설정, 스케일링, 어플리케이션 상태 모니터링, 인스턴스 설정 등 처리

### BeanStalk 구성 요소
- 어플리케이션: 
- 어플리케이션 버전:
- 환경: 리소스들의 컬렉션 -> 환경은 한번에 하나의 버전
	- 티어: 웹 서버 환경 티어, 워커 환경 티어 두개로 티어가 구성됨
	- dev, test, prod 같은 다양한 환경을 구성할 수 있음
- 어플리케이션 생성 -> 버전 업로드 -> 환경 시작 -> 관리 시작

### 웹 티어 및 워커 티어
- 웹 티어: 전통적인 웹 어플 환경: ELB 중심
- 워커 티어: 접속한는 client가 없고 SQS Queue와 같은 기능을 제공 -> 대기열에서 오는 작업을 처리 : SQS Queue 중심
