### 조직 개요
 - 글로벌 서비스로 다수의 AWS 계정을 동시에 관리할 수 있음
 - 조직을 생성하면 조직의 메인 계정이 `관리 계정`이 됨
 - 조직에 가입한 기타 계정이나 조직에서 생성한 계정은 `멤버 계정`이라고 부르며 멤버 계정은 한 조직에만 소속
 - Organizations는 모든 계정의 비용을 통합 결제할 수 있음
 - 관리 계정에 하나의 지불 방법만 설정해 두면 조직 전체의 비용을 지불할 수 있음
 - Organizations를 사용하면 조직 내 모든 계정에 대해 집계된 사용량에 기반한 비용 할인을 받을 수 있음
 - 모든 계정에서 EC2 또는 Amazon S3를 많이 사용한다면 모든 계정의 사용량이 합쳐져서 계산되므로 큰 할인 혜택을 받을 수 있음
 - 계정 간에 예약 인스턴스와 Savings Plans 할인이 공유
 - 어떤 계정에서 사용하지 않는 예약 인스턴스가 있을 때 다른 계정이 해당 인스턴스를 사용할 수 있음
 - 할인이 조직 전체에 걸쳐 적용되므로 비용 절감에 도움을 줄 수 있음
 - Organizations 내 계정 생성을 자동화할 수 있는 API가 있어 Organizations를 사용하면 계정을 쉽게 생성할 수 있음
 - 어떤 원리로 작동?
	 - `루트 조직 단위(Root Organizational Unit = OU)`라는 개념이 있음
	 - 전체 계정에서 제일 외곽에 있는 OU
	 - 이 안에 관리 계정이 있고, 서브 OU를 생성할 수 있음
	 - 개발 계정 OU를 생성하고 그 안에 멤버 계정을 생성하거나 프로덕션 계정 OU를 생성하고 멤버 계정을 추가할 수 있음
	 - 프로덕션 OU 안에 HR 멤버 계정 OU를 만들 수도 있고, 재무 멤버 계정 OU를 만들 수도 있죠 원하는 대로 조직이 가능
- 비즈니스 단위에 따라 OU를 조직하는 경우 관리 계정 아래에 세일즈, 리테일 및 재무 OU를 두고 OU별로 멤버 계정을 생성할 수 있음
- 환경에 따라 OU를 구성할 수도 있음
	- 예를 들어 프로덕션 OU 테스트 OU, 개발 OU를 만들고, 각 OU에 계정을 만드는 것
	- 프로젝트별 OU와 멤버 계정을 생성하는 프로젝트 기반 OU도 가능
- Organizations의 장점? 
	- 다수의 계정을 가지므로 다수의 VPC를 가진 단일 계정에 비해 보안이 뛰어남
		- 계정이 VPC보다 독립적이기 때문
	- 청구 목적의 태그 기준을 적용할 수 있고, 한 번에 모든 계정에 대해 CloudTrail을 활성화해서 모든 로그를 중앙 S3 계정으로 전송할 수 있음
	- CloudWatch Logs를 중앙 로깅 계정으로 전송할 수도 있고, 자동으로 관리 목적의 계정 간 역할을 수립할 수 있어 관리 계정에서 모든 멤버 계정을 관리할 수 있음
	- 보안 측면에서 `서비스 제어 정책(Service Control Policies = SCP)`를 정의할 수 있는데 이는 특정 OU 또는 계정에 적용되는 IAM 정책으로 해당 사용자와 역할 모두가 계정 내에서 할 수 있는 일을 제한
- SCP는 모든 대상에 적용되나 영구적인 관리자 권한을 갖는 `관리 계정에는 적용되지 않음`
	- 발생했을 때 누군가는 복구를 해야 하기 때문
- SCP는 기본적으로 아무것도 허용하지 않음
	- 구체적인 허용 항목을 설정해야 작동
- 루트 OU가 있고 관리 계정이 있고, 프로덕션 OU 안에 계정 A가 있고, 서브 OU인 HR OU, 재무 OU에는 각각 계정 B와 C가 들어있다고 가정
- SCP가 각 계정의 권한에 미치는 영향?
	- 루트 OU에는 FullAWSAccess(전체 AWS 액세스) SCP를 적용
		- 루트 OU 내의 계정은 모든 계정에 대한 전체 권한을 갖음
	- 관리 계정 프로덕션 계정의 계정 A, 계정 B, 계정 C에 대한 모든 권한을 갖고, 추가 SCP를 적용
		- 관리 계정에는 DenyAccessAthena SCP를 적용하고, 프로덕션 OU에는 DenyRedshift SCP를 적용,다른 SCP도 있음
		- 관리 계정에 Athena 서비스 액세스를 제한하기 위해 DenyAccessAthena <u>SCP를 적용하긴 했지만 관리 계정에는 SCP가 적용되지 않으므로 여전히 모든 것이 가능하고</u>, 모든 대상에 대해 관리자 권한을 갖음
	- 계정 A는 어떨까? -> 계정 A는 루트 OU에 있으므로 많은 일을 할 수 있음
	- 계정 A는 프로덕션 OU에 속함 프로덕션 OU에는 DenyRedshift SCP가 추가되어 있어서 계정 A는 Redshift에 액세스할 수 없음
		- AuthorizedRedshift SCP가 계정 A에 추가되어 있지만 정책에 명시적 거부가 하나라도 포함되면 기본적으로 액세스가 거부됨
		- 계정 A는 Redshift 서비스 액세스 외의 모든 일을 할 수 있음
	- 계정 B는 프로덕션 OU 안에 있는 HR OU에 속하며 모든 것을 상속함
		- 계정 B는 루트 OU로부터 FullAWSAccess SCP를 상속하고, 프로덕션 OU로부터 DenyRedshift SCP를 HR OU로부터 DenyAWSLambda SCP를 상속
		- 따라서 Redshift 및 Lambda 액세스 외의 모든 일을 할 수 있음
	- 계정 C는 재무 OU에 속함
		- 재무 OU는 루트 OU의 프로덕션 OU에 속하므로 Redshift 액세스 외의 모든 일이 가능
- SCP에는 '차단 목록(Deny)'과 '허용 목록(Allow)' 두 가지 전략이 있음
	- 차단 목록은 계정이 사용하지 못하게 할 서비스를 지정
		- Allow, `*`(별표)로 모든 서비스의 모든 작업을 허용한 다음 Deny 문을 추가해 DynamoDB에 대한 액세스를 거부하는 방식
	- 허용 목록은 모든 액션을 허용하지 않고, 가령 EC2와 CloudWatch만 허용하는 방식
		- 해당 SCP가 적용된 계정에서는 EC2와 CloudWatch만이 허용되며 다른 서비스는 사용할 수 없고, 사용하려면 명시적 허용이 필요
### IAM - 고급
 - IAM 조건은 IAM 내부의 정책에 적용되며 사용자 정책일 수도 있고, S3 버킷에 대한 리소스 정책일 수도 있음
	 - 엔드포인트 정책 등 어떤 정책도 될 수 있음
 - 첫 번째 조건은 aws:SourceIp
	 - API 호출이 생성되는 클라이언트 IP를 제한하는 데 사용되는 조건
	 - 정책을 보면 모든 작업과 리소스를 거부(Deny)하지만 조건이 있음
	 - Condition의 NotIpAddress 범위에 포함되지 않는 IP 주소는 거부하는 것
	 - 클라이언트가 해당 IP 주소 내에서 API 호출을 하지 않으면 API 호출이 거부된다는 뜻
	 - 예를 들어 회사 네트워크에서만 AWS를 사용하도록 제한하여 회사 내에서만 AWS 환경에 액세스할 수 있게 설정할 수 있음 -> 첫번째 조건
 - 다음 조건은 aws:RequestedRegion
	 - AWS로 시작하므로 글로벌 조건이며 API 호출 리전을 제한
	 - Deny고, Condition - StringEquals - aws:RequestedRegion : \[\'eu-central-1', 'eu-west-1'\]\ 라고 가정
	 - eu-central-1와 eu-west-1 리전에서 오는 EC2, RDS, DynamoDB 호출을 제한
	 - 특정 리전에서 특정 서비스에 대한 액세스를 거부하는 것
	 - 조건을 조직 SCP에 보다 글로벌하게 적용해서 특정 리전의 액세스를 허용하거나 거부할 수 있음
 - ec2:ResourceTag
	 - 태그의 접두사가 EC2라서 조건은 EC2 인스턴스의 태그에 적용됨
	 - ResourceTag/Project가 DataAnalytics일 때 모든 인스턴스의 시작과 종료를 허용
	 - EC2 인스턴스가 올바른 태그를 갖고 있으면, 즉 Project가 DataAnalytics이면 허용됨
	 -  aws:PrincipleTag/Department: Data 일 경우 aws:PrincipleTag는 EC2 인스턴스 태그가 아닌 사용자 태그에 적용
	 - 상기 작업을 수행하려면 사용자의 Department가 Data여야 함
 - 멀티팩터 인증을 강제하는 aws:MultiFactorAuthPresent
	 - 정책을 보면 사용자는 EC2에서 모든 작업을 할 수 있지만 멀티팩터 인증이 있어야만 인스턴스를 중지하고 종료할 수 있음
	 - Deny이고 aws:MultiFactorAuthPresent:false 일 경우 MFA가 false(거짓)일 때 거부됨
 - S3 버킷에 대한 IAM 정책?
	 - 예를 들어 선언문이 있는데 첫 번째는 목록 버킷이고 arn:aws:s3:::test 일 경우 s3:::test라는 ARN에 적용, 버킷 수준의 권한이므로 버킷을 특정해야 함
	 - GetObject, PutObject DeleteObject는 버킷 내의 객체에 적용되므로 ARN이 달라짐 -> arn:aws:s3:::test/* 와 같음
	 - 버킷 내의 모든 객체를 나타내는 /\*\이 들어감
	 - 객체 수준 권한이기 때문에 ARN이 달라짐
 - aws:PrincipalOrgID와 리소스 정책?
	 - aws:PrincipalOrgID라는 조건은 AWS 조직의 멤버 계정에만 리소스 정책이 적용되도록 제한
	 - 다수의 계정이 포함된 조직이 있고, PrincipleOrgID의 계정에서 API 호출이 생성된 경우에만 PutObject, GetObject 작업을 할 수 있음
		 - aws:PrincipalOrgID: \[\o-yyyyy\]\ 일 경우 o-yyyyy 조직 내의 맴버 계정만 Action에서 허용한 작업이 가능
	 - 조직 내의 멤버 계정만 S3 버킷에 액세스할 수 있고, 조직 외부의 사용자는 이 S3 버킷 정책에 의해 액세스가 거부됨
###  IAM - Resource-based Policies vs IAM Roles
- IAM 역할과 리소스 기반 정책의 근본적인 차이점
- 교차 계정의 경우 가령 S3 버킷 교차 계정에서 API 호출을 수행하려면 두 가지 방법이  있음
	- S3 버킷에 S3 정책을 적용하는 것처럼 리소스에 리소스 기반 정책을 추가
	- 리소스에 액세스할 수 있는 역할을 사용
- 계정 A의 사용자가 Amazon S3 버킷에 대한 액세스 권한이 있는 계정 B의 역할을 사용 
	- IAM 역할이 S3 버킷에 액세스
- 아니면 계정 A의 사용자가 계정 B의 Amazon S3 버킷에 적용된 **버킷 정책**을 통해 S3 버킷에 액세스할 수도 있음
	- S3 버킷 정책이 사용자의 액세스를 허용
- 첫 번째는 IAM 역할이 S3 버킷에 액세스했고, 두 번째는 S3 버킷 정책이 사용자의 액세스를 허용
- 차이는?  -> <u>역할을 맡으면 기존의 권한을 모두 포기하고, 해당 역할에 할당된 권한을 상속</u>
	- 예를 들어 어떤 작업을 수행하는 역할을 맡게 되면 해당 역할에 부여된 작업은 할 수 있지만 기존의 권한은 사용할 수 없음
- 대신 <u>리소스 기반 정책을 사용하면 본인이 역할을 맡지 않으므로 권한을 포기할 필요가 없음</u>
	- 예를 들어 계정 A의 사용자가 본인 계정의 DynamoDB 테이블을 스캔해 계정 B의 S3 버킷에 넣을 경우에는 리소스 기반 정책을 사용하는 것이 좋음
	- 역할을 맡을 필요가 없으므로 DynamoDB 테이블을 스캔하고, 다른 계정의 S3 버킷에 쓰기 작업도 할 수 있음
- Amazon S3 버킷 SNS 주제, SQS 대기열, Lambda 함수 등에서 지원
- Amazon EventBridge에는 원하는 작업을 하려면 대상에 대한 권한을 요구하는 규칙이 있음
- 두 가지 유형의 대상
- 리소스 기반 정책을 지원하는 대상에는 Lambda, SNS, SQS, CloudWatch Logs API Gateway 등
	- 이 경우 대상 리소스를 변경해서 리소스 기반 규칙을 적용해 EventBridge가 원하는 작업을 수행할 수 있도록 허용
- 두 번째 유형은 Kinesis Data Streams, Systems Manager Run Command나 ECS 태스크를 시작할 때는 IAM 역할이 필요
	- IAM 역할을 EventBridge 규칙에 추가하면 Kinesis에 쓰기 작업을 수행할 권한을 갖게 됨
- SNS, SQS, Lambda에는 리소스 기반 정책을 사용하고, Kinesis Data Streams에는 IAM 역할을 사용
### IAM - 정책 평가 로직
- 권한 경계(Permissions boundary)는 사용자와 역할만 지원하고, 그룹은 지원하지 않음
	- IAM 개체의 최대 권한을 정의하는 고급 기능
- S3, CloudWatch, EC2를 모두 허용 한다고 가정
	- 이걸 IAM 사용자에 연결하면 권한 경계를 설정하면 S3, CloudWatch, EC2 내의 작업만 할 수 있게 됨
- 추가로 IAM 정책을 통해 IAM 권한을 지정한다고 가정
	- iam:CreateUser 액션과 * 리소스를 같은 사용자에 연결하면 권한 경계와 IAM 정책을 통한 권한이 완성
- <u>결과적으로 아무 권한도 생기지 않음</u>
	- IAM 정책은 IAM 권한 경계 밖에 있기 때문에 사용자가 다른 IAM 사용자를 생성할 수 없음
	- IAM 권한 경계에 포함되지 않았기 때문
	- 따라서 IAM 권한 경계를 생성하기 전에 사용자를 생성해야 함
- 이름은 John으로 정하고 Programmatic access를 선택 후 Permissions 페이지와 Tags 페이지는 생략한 뒤 검토하고 사용자를 생성
- John은 회사의 개발자라 특정 권한을 줘야 하는데 권한 경계를 만들도록 정책을 할당
	- 권한 추가(Add permissions)를 눌러 AdministratorAccess에 연결하면 John이 무슨 작업이든 할 수 있는 슈퍼 사용자가 됨
- John에게 권한 경계를 추가해야 함
	- 권한 경계로 AmazonS3FullAccess를 지정
	-  AmazonS3FullAccess 관리자 정책 때문에 John에게 AdministratorAcess가 있어도 권한 경계인 S3 내부에만 액세스할 수 있음
	- 즉 <u>관리자 액세스를 부여하는 정책을 연결했음에도 권한 경계 때문에 제한이 생김</u>
- IAM 권한 경계는 AWS Organizations SCP와 함께 사용될 수 있음
- 유효(effective) 권한이 사용자나 그룹에 부여된 자격 증명 기반 정책과 그룹이 아닌 사용자나 역할에만 적용되는 권한 경계와 계정상 모든 IAM 개체에 적용되는 Organizations SCP 중앙에 있음
- 사용자가 주어지는 권한은 교집합 부분
- 관리자가 아닌 사용자에 책임을 위임하기 위해 권한 경계 내에서 새 IAM 사용자를 생성하거나 개발자가 권한을 스스로 부여하고 관리하는데 특권을 남용하는 것을 막기 위해 스스로를 관리자로 만들지 못하게 할 수 있음
- 계정에 SCP를 적용해서 계정의 모든 사용자를 제한하지 않고, AWS Organizations의 특정 사용자만 제한할 수도 있음
- IAM 정책 평가 논리
- AWS 내에서 액션에 대한 권한 부여 방법을 알 수 있음
- 전체 흐름 중에 각 단계마다 평가가 이루어짐
- 평가 거부, Organizations SCP 리소스 기반 정책, 자격 증명 기반 정책, IAM 권한 경계, 세션 정책으로 특정 IAM 액션을 허용할지 거부할지 자세히 알아보면
- 우선 가능한 모든 정책을 살펴보고, 명시적인 거부가 있다면 자동으로 거부됨
- Organizations SCP
	- 허용된다고 평가되면 다음 단계로 넘어가고, 그렇지 않다면 암시적 거부로 거부
- 리소스 기반 정책으로 S3 버킷에 적용되거나 SQS 대기열에 적용됐는지 평가. 리소스 기반 정책이 있는지 있다면 허용 여부에 따라 나뉨
- 자격 증명 기반 정책에서는 자격 증명 정책이 있는지 없는지 허용이 됐는지 아닌지에 따라 암시적으로 거부되거나 다음 단계로 넘어감 -> IAM 권한 경계
- **특정 IAM 액션을 할 때마다 모든 방면에서 평가**
- 모든 방면에서 거부되지 않고 허용됐을 때만 마지막 허용 여부가 결정되고 액션을 진행할 수 있음
- 액션에는 sqs:\*\, 효과는 Deny 그리고 리소스는 \*
- sqs:DeleteQueue에 Allow와 리소스 \*\이 있음
- sqs:CreateQueue를 실행할 수 있을까? -> 정답은 생성할 수 없음  sqs:* 에 Deny와 \*\가 있는데 CreateQueue가 해당 블록에 포함되기 때문에 거부
- sqs:DeleteQueue는 실행할 수 있을요? -> 위쪽에 Deny가 있고 아래에 Allow가 있어 동시에 있음. 명시적 거부가 있으면 바로 결정이 거부됨
	- sqs:*에 Deny가 명시되어 있기 때문에 sqs:* 안에 있는 sqs:DeleteQueue는 Allow가 있음에도 자동으로 거부
	- 두 번째 블록에 Allow가 명시되어 있어도 sqs:DeleteQueue도 실행할 수 없음
- ec2:DescribeInstances는 실행할 수 있을요? -> IAM 정책에 EC2 관련 사항은 없음
	- 명시적 거부도 없지만 명시적 허용도 없기 때문에 해당 IAM 정책 내에서는 ec2:DescribeInstances를 실행할 수 없음
### AWS IAM Identity Center
- AWS IAM 자격 증명 센터로 이전 AWS 싱글 사인온 서비스의 후속 서비스
- 한 번만 로그인하면 되니까 싱글 사인온
- AWS 조직이나 비즈니스 클라우드 애플리케이션의 모든 AWS 계정에서 싱글 사인온을 할 수 있음
	- 즉, Salesforce, Box, Microsoft 365 등에 연결할 수 있죠, 또는 SAML2.0 통합이 가능한 어떤 애플리케이션에라도 연결할 수 있음
	- EC2 Windows 인스턴스에 대해서도 싱글 로그인을 제공
- ID 공급자는 이 로그인을 위해 사용자는 두 위치에 저장될 수 있음
	- IAM 자격 증명 센터에 내장된 ID 저장소나, 서드파티 ID 공급자에 연결할 수 있음
	- Active Directory(AD)이거나, OneLogin, Okta 등일 수 있음
- 로그인 페이지로 이동하여 사용자 이름과 비밀번호를 입력하고 바로 AWS IAM 자격 증명 센터로 이동
	- 계정에 대해 활성화해뒀기 때문에 제가 원하는 계정을 클릭하여 원하는 곳으로, 예를 들어 관리 콘솔로 바로 연결할 수 있음
	- 그냥 IAM 자격 증명 센터 포털에 로그인하면 됨, SSO, 즉, 다시 비밀번호를 입력할 필요 없는 싱글 사인온
- 계정, 비즈니스 애플리케이션 등에 액세스할 수 있음
- 여러 개의 AWS 계정을 가지고 있다면 이 서비스를 사용하는 것을 추천
- 작동방식? 
	- 브라우저 인터페이스는 AWS IAM 자격 증명 센터의 로그인 페이지에 연결
	- 다른 사용자 스토어와 통합해야 함
	- 클라우드 또는 온프레미스에 있는 Active Directory도 가능
	- Active Directory를 사용하여 사용자와 그룹을 관리할 수 있음
	- 또는 IAM 자격 증명 센터를 사용할 수도 있음
		- 빌트인 자격 증명 스토어에서 예를 들어 사용자나 그룹을 정의할 수 있음
	- ID 센터를 AWS 조직이나 Windows EC2 인스턴스, 비즈니스 클라우드 애플리케이션 , 사용자 정의 SAML2.0 지원 애플리케이션 등과 통합
- 로그인했다고 해서 모든 항목에 액세스할 수 있는 건 아님
	- 자격 증명 센터에서 권한 셋을 정의해서 어떤 사용자가 무엇에 액세스할 수 있는지 정의
- 권한, 사용자, 그룹은 IAM 자격 증명 센터에서는 어떻게 연관되어 있을까?
- 조직 하나 있다고 가정.  관리 계정에 IAM 자격 증명 센터를 설정
	- 두 개의 OU가 있고, 개발 OU와 프로덕션 OU가 있고, 각각의 계정이 있음
	- 회사에는 Bob과 Alice 두 명의 개발자가 있을 경우
	- IAM에서 했던 것처럼 Bob과 Alice에 대해 개발자 그룹을 만들고, Bob과 Alice가 개발 OU에 대해 전체 액세스 권한을 갖도록 하려고 함
	- 권한 셋이라는 것을 만들고 거기에 관리자 액세스를 허용
	- 권한 셋을 특정 OU와 연결하기 위해 개발 OU에 있는 사람과 연결, 그리고 이 권한 셋을 개발자 그룹에 할당
	- Bob과 Alice는 전체 액세스를 허용하는 모든 개발 계정에서 역할을 맡을 수 있음
	- 프로덕션 OU에 대해 읽기 전용 액세스이라는 다른 권한 셋을 만들 수 있음
	- 연결하고 다시 권한을 개발자 그룹에 할당
	- 사용자를 그룹, 권한 셋, IAM 자격 증명 센터의 특정 계정 할당에 연결할 수 있음
- **다중 계정 권한**
	- 서비스를 사용하면 조직에서 여러 계정에 대한 액세스를 관리할 수 있음
	- 권한 셋을 사용하여 사용자를 그룹에 할당하는 하나 이상의 IAM 정책을 정의
		- AWS에서 사용자가 무엇에 액세스할 수 있는지 정의하기 위해
	- IAM 자격 증명 센터는 조직과 통합되어 있음
	- 데이터베이스 관리자를 위한 권한 셋을 정의할 수 있음
	- 즉, IAM 정책 모음
		- 예를 들어 Dev 계정의 RDS 또는 Aurora나 Prod 계정의 RDS 또는 Aurora에 액세스할 수 있다고 가정
		- 사융자에 대해 IAM 역할이 자동으로 생성됨
		- 데이터베이스 관리자가 예를 들어 그룹이라면, 즉 사용자가 그룹에 있다면 거기에 데이터베이스 관리자의 권한 셋을 할당하면, 사용자가 IAM 자격 증명 센터를 통해 로그인해서 Dev 계정 또는 Prod 계정의 콘솔에 액세스할 때 해당 계정에서 IAM 역할을 자동으로 위임
- 애플리케이션 할당
	- 어떤 사용자 또는 그룹이 어떤 애플리케이션에 액세스할 수 있는지 정의할 수 있음
	- 필요한 URL, 인증서, 메타데이터가 제공
	- 모든 것이 기본적으로 지원됩니다, 이를 가능하게 하는 것을 속성 기반 액세스 제어라고 함
		- IAM 자격 증명 센터 스토어에 저장된 사용자 속성을 기반으로 세분화된 권한을 갖게 됨 -> 태그 같은 것
	- 사용자를 비용 센터에 할당하거나, 주니어나 시니어와 같은 직함을 주거나 로케일을 줘서 특정 리전에만 액세스하도록 할 수 있음
	- 사용 사례는 IAM 권한 셋을 한 번만 정의하고 이 속성을 활용하여 사용자 또는 그룹의 AWS 액세스만 수정
	- IAM 자격 증명 센터를 사용하여 활성화됨
### AWS 디렉토리 서비스 - 개요
- Microsoft AD는 AD 도메인 서비스를 사용하는 모든 Windows 서버에 사용되는 소프트웨어
- 객체의 데이터베이스이며 사용자 계정, 컴퓨터, 프린터, 파일 공유, 보안 그룹이 객체가 될 수 있음
- 전체 Microsoft 생태계에서 관리되는 온프레미스의 모든 사용자는 Microsoft Active Directory의 관리 대상이 됨
- 중앙 집중식 보안 관리로 계정 생성, 권한 할당 등의 작업이 가능
- 모든 객체는 트리(tree)로 구성되며 트리의 그룹을 포레스트(forest)
- 도메인 컨트롤러에 계정을 생성할 경우 사용자 이름은 John 비밀번호는 Password로 지정
- 모든 Windows 머신은 동일한 네트워크에 있고, 도메인 컨트롤러에 연결되어 있어 사용자는 어떤 단일 머신에서도 엑세스 가능
- AWS Directory 서비스는 AWS에 액티브 디렉터리를 생성하는 서비스로 세 가지 서비스가 있음
	- AWS 관리형(Managed) Microsoft AD는 AWS에 자체 액티브 디렉터리를 생성하고, 로컬에서 관리할 수 있으며 멀티팩터 인증을 지원
		- 독립 실행형 Active Directory로 사용자가 있는 온프레미스 AD와 신뢰 관계를 구축할 수 있음
		- AWS 관리형 AD가 온프레미스 AD와 상호 신뢰 관계를 구축하게 되는 것
		- AWS 관리형 AD의 인증된 사용자가 AWS 관리형이 아닌 계정을 사용할 때 온프레미스 AD에서 계정을 검색할 수 있고, 반대로 온프레미스 AD 사용자가 AWS 계정을 사용해 온프레미스 AD에서 인증하려 할 때도 신뢰 관계에 의거해 AWS AD에서 검색할 수 있음
			- 온프레미스와 AWS 액티브 디렉터리 간에 사용자가 공유
	- AD 커넥터(AD Connector)
		- 디렉터리 게이트웨이, 즉 프록시로 온프레미스 AD에 리다이렉트하며 MFA, 즉 멀티팩터 인증을 지원
		- 사용자는 온프레미스 AD에서만 관리됨
		- AD 커넥터는 프록시로 기능하므로 사용자가 AD 커넥터를 사용해 인증하려고 하면 온프레미스 AD에 요청을 프록시하고 찾아볼 뿐
		- 첫 번째 유형인 AWS 관리형 Microsoft AD에서는 AWS 관리형 AD와 온프레미스 AD 모두에 사용자가 있었는데 AD 커넥터는 이름처럼 연결하는 역할
		- 온프레미스 AD에 쿼리와 연결 요청을 프록시하므로 <u>온프레미스 AD에서만 사용자를 관리할 수 있음</u>
	- Simple AD
		- AWS의 AD 호환 관리형 디렉터리로 Microsoft 디렉터리를 사용하지 않으며 온프레미스 AD와도 결합되지 않음
		- 온프레미스 AD가 없으나 AWS 클라우드에 액티브 디렉터리가 필요한 경우 독립형인 Simple AD 서비스를 사용
		- 액티브 디렉터리를 사용해 Windows를 실행할 EC2 인스턴스를 생성하고, 이 Windows  인스턴스는 네트워크용 도메인 컨트롤러와 결합되어 모든 로그인 정보와 자격 증명 등을 공유
		- Windows를 실행하는 EC2 인스턴스와 디렉터리를 가까이 위치시키기 위해 <u>AWS에 디렉터리가 필요</u>
- 온프레미스에서 사용자를 프록시한다면 AD 커넥터가 필요하고, AWS 클라우드에서 사용자를 관리하고 MFA를 사용해야 할 때는 AWS 관리형 AD가 필요, 온프레미스가 없을 때는 Simple AD를 선택
- IAM Identity Center와 액티브 디렉터리 통합 방법?
- Directory 서비스를 통해 AWS 관리형 AD 연결할 경우 통합 방법은 간단
	- IAM Identity Center를 AWS 관리형 Microsoft AD에 통합하고 연결하도록 설정
- 액티브 디렉터리를 클라우드에서 관리하지 않고, 온프레미스에 자체 관리형 디렉터리가 있는 경우에는 어떻게 할까?
- 자체 관리형 디렉터리에 연결하는 방법은 두 가지
	- 첫 번째 방법은 **AWS 관리형 Microsoft AD**를 사용해 양방향 신뢰 관계를 구축
		- Directory 서비스를 이용하여 관리형 Microsoft AD를 생성하고, 온프레미스에 있는 AD와 관리형 AD 간에 양방향 신뢰 관계를 구축한 다음 IAM Identity Center에서 싱글 사인온으로 간단히 통합
	- 다른 방법은 AD 커넥터를 활용하는 것
		- AD 커넥터는 IAM Identity Center와 연결하는 역할을 하고 , 연결한 다음에는 자동으로 모든 요청을 자체 디렉터리로 프록시
- 클라우드에 있는 액티브 디렉터리에서 사용자를 관리하고 싶다면 첫 번째 솔루션이 낫고 API 호출만 프록시하려면 지연 시간은 길어지지만 두 번째 솔루션이 적합
### AWS Control Tower
- AWS Control Tower 서비스를 사용하면 모범 사례를 기반으로 안전하고, 규정을 준수하는 다중 계정 AWS 환경을 손쉽게 설정하고 관리할 수 있음
- 다중 계정을 생성하기 위해 Control Tower 서비스는 AWS Organization 서비스를 사용해 계정을 자동 생성
- Control Tower 서비스의 장점
	- 클릭 몇 번으로 환경을 자동으로 설정할 수 있고, 원하는 모든 것을 미리 구성이 가능
	- 가드레일을 사용해 자동으로 지속적인 정책 관리를 할 수 있음
	- 정책 위반을 감지하고, 자동으로 교정할 수 있으며 대화형 대시보드를 통해 모든 계정의 전반적인 규정 준수를 모니터링
		- AWS Organization를 활용하는 또 다른 서비스
- 가드레일은 무엇일까? 
	- AWS에서 다중 계정을 설정한다고 할 때 특정 항목에 관해 한 번에 모두 제한하거나 특정 유형의 규정 준수 사항을 모니터링하고자 함
- 가드레일을 사용하면 Control Tower 환경 내의 모든 계정에 관한 거버넌스를 얻을 수 있음
- 가드레일은 두 가지 유형이 있음
	- 예방(Preventive) 가드레일
		- 계정을 무언가로부터 보호하는 것이므로 제한적이기 때문에 AWS Organization 서비스의 서비스 제한 정책인 SCP를 사용해 모든 계정에 적용
		- 예방 가드레일을 생성해 모든 계정에서 리전을 제한하고, us-east-1과 eu-west-2의 리전에서만 작업하도록 할 수 있음
		- Control Tower에서 Organization에 SCPs를 사용하도록 하는 것
	- 가드레일은 탐지(Detective) 가드레일
		- 규정을 준수하지 않는 것을 탐지하는 것
		- AWS Config 서비스를 사용
		- 계정에서 태그가 지정되지 않은 리소스를 식별한다고 하면 Control Tower로 탐지 가드레일을 설정하고, AWS Config를 사용하면 모든 멤버 계정에 Config가 배포되어 규칙과 태그가 지정되지 않은 리소스를 모니터링 하는데 규정을 준수하지 않으면 SNS 주제를 트리거 해서 관리자로서 알림을 받거나 SNS 주제도 Lambda 함수를 실행해  Lambda 함수가 자동으로 문제를 교정
		- 즉, 태그가 지정되지 않은 리소스에 태그를 추가
