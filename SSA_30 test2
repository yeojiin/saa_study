### IAM
- 자격증명을 EC2인스턴스에 유지하는 것은 잘못된 관행
- S3 버킷에 저장된 데이터에 대해 계정 수준 액세스 뿐 아니라 사용자 수준을 제공하고 싶을 경우 -> S3 버킷 policy는 사용자에 대한 권한을 지정하는 것이 아니기 때문에 `사용자`는 IAM 정책을 이용
### 인스턴스 예약
- 최소의 인스턴스를 맞추고, 80개가 80%의 사용률이 필요하니 최소 80개를 유지 후 오토스케일링으로 유지 -> ❓최소 20개가 필요한데 min으로 조절한다는 의미? 최소 용량을 어떻게 맞춤?
### Dedicated instance
- 전용 인스턴스는 단일 고객 전용 하드웨어의 VPC에서 실행되는 EC2 -> single로 전용으로 쓴다고 하면 dedicated
- 서로 다른 aws 계정이더라도 단일 지불자는 하드웨어 수준에서 물리적으로 연결됨
- 물리적 서버를 전용으로 받는 것
- 전용 호스트: 물리적 서버 전체를 이용해서 `하드웨어 공유하지 않음`
	- 법규 준수 요건이 있음, 소켓, 코어 등
	- 라이선스와 함께 제공, BYOL
- dedicated 인스턴스: 
	- **전용 인스턴스와 호스트에 차이가 있음 -> 물리적 하드웨어
	- 전용 호스트는 물리적 서버에 대한 접근권을 갖음 낮은 수준의 하드웨어에 대한 가시성
### User pool
- user pool
	- cognito의 사용자 디렉토리로 기본 제공 사용자 관리를 제공
	- 외부 서비스 로그인 등을 aws 로그인과 통합할 수 있음
	- `사용자 인증` 프로세서를 비즈니스 서버와 분리하기 위해 사용할 수 있음 -> 사용자 인증관련된 내용은 identity가 아닌 user pool 사용
- identity pool
	- 사용자가 다른 aws 서비스에 액세스할 수 있도록 aws 자격 증명을 제공 
### KMS
- 자동 갱신을 사용 -> 갱신 기간은 조정 가능❓
- 키를 수동으로 갱신하는 것은 효율적이지 않음
### Aurora
- **여러 지역에서 짧은 지연 시간으로 빠른 로컬 읽기가 가능**
- redshift는 거래 관계 DB는 거래 관계 DB로 사용하는데 적합하지 않음
- 대규모 데이터 세트 저장 및 분석을 위해 사용 -> 빅데이터 등
### 보안그룹과 ACL
- 보안그룹은 상태 정보(stateful) -> 필요한 포트를 허용해야함
- ACL은 stateless -> 인바운드 및 아웃바운드 트래픽 모두를 허용해야 함
	- 모든 포트 범위를 허용
### S3
- S3 개체는 해당 개체를 업로드한 aws 계정이 소유
- S3 버킷 소유자라 하더라고 redshift 클러스터에서 작성한 개체에 대한 액세스 권한은 가질 수 없음
- IAM 역할이 UNLOW 명령을 다시 실행해야 함 -> IAM 권한 추가 필요
### EFS
- EFS Standatd-IA storage class는 아마존 컴퓨팅 및 온프레미스 서버에서 사용 되는 `파일 스토리지 서비스` 
- S3 Standard-IA storage class는 `객체 저장 서비스`
	- 매일 액세스되지 않는 파일의 스토리지 비용을 줄임
	- 전체 데이터 셋에 쉽게 액세스 할 수 있고, 엑세스 빈도가 낮은 파일 스토리지 비용을 절약할 수 있을 때 사용
- Max I/O 성능 모드(performance)는 높은 수준의 처리량을 제공함
	- 빅데이터 분석 등과 같이 병렬화 된 어플리케이션 파일 전송에 사용됨
- Bursting Throughput, provisioned Throughput은 성능 모드가 아닌 처리량 모드(throughput)
### organiazion migration
- 이전 조직에서 구성원 제거를 먼저 실행 -> 구성원 제거가 먼저 이뤄져야함
- 새 조직에서 초대장 발송 후 수락
### RDS
- 원자성으로 거래다 덮어쓰기 되더라도 실패 시 rollback이 되기 때문에 안전
- neptune
	- 고도로 연결된 데이터 셋과 함계 작동 -> `graph db 서비스`
	- 고성능이기 때문에 단순 거래 덮어쓰기에는 불필요
### SCP
- **조직의 모든 계정에 대해 사용 가능한 최대 권한을** 중앙에서 제어하여 계정이 조직의 액세스 제어 지침 내에 유지되도록 함 -> 일부 권한을 제한 하고 싶은 경우 부적합
- organization이 업급되지 않은 유스케이스이기 때문에 부적합
### 인스턴스
- 인스턴스 종료 전략에서 특정 우선순위가 지정되어 있지 않다면 가장 오래된 인스턴스가 종료됨 - 기본 종료 방식을 따를 경우
### S3 Intelligent Tiering
- 최고의 확장성, 데이터 가용성, 보안 등을 제공
- `객체 스토리지 서비스` 이기 때문에 네트워크 파일 시스템을 마운트 할 수 없음
### ACM
- acm을 통해 생성된 SSL/TLS 인증서는 자동으로 갱신하기 때문에 만료를 모니터링할 필요 없음
- `third-party` 타사 인증서는 갱신을 위해 ACM으로 가져온 뒤 지정 기일이 지나면 만료되는지 모니터링 후 트리거를 통해 알림 설정
### Read RDS
- 읽기 복제본 추가하는 것은 `확장성(scalability)` 문제를 해결하는 것, 가용성을 높일 수는 없음
- 가용성(availability)을 높이기 위해서는 복제본 생성이 아닌 다중 지역에 RDS를 만들어 하나의 서버가 떨어져도 유지할 수 있도록 해야
### S3 Glacier Deep Archive
- aws snowball에서 S3 Glacier로 직접 데이터를 이동할 수 없고, 아마존 S3를 거친 후 라프 사이클 정책을 사용해야 함
- Glacier Depp Archive가 Glacier Archive보다 더 비용적 측면이 유리함
### VPC
- VPC 워크로드에 대한 공유 엑세스를 제공하면서 관리 오버헤드와 비용을 절감할 수 있음
- 공유 서비스 VPC를 구축
- 각 VPC에 사용될 때 VPC끼리 서로 통신이 필요하거나 할 때 peering 서비스 이용
	- 서로 다른 VPC에 있는 리소스 간의 정보 공유를 용이하기 위해 사용
	- 다른 VPC의 모든 리소스에 액세스할 수 있음
### SQS
- 모니터링 서비스를 구축하려 할 때 시스템의 데이터는 독립적인 순서대로 처리되어야 하며 소비자 수를 모니터링 대상 데스크톱 시스템 수와 동일하게 조정하고 싶을 경우
- SQS FIFO 대기열을 만들어서 GroupID 속성과 함께 전달
- SQS는 최대 1명의 소비자만 메세지를 가질 수 있기 때문에 고유 아이디가 되는 Group ID가 필요함
### Secret Manager, KMS
- Secret Manager은 응용 프로그램, 서비스 및 IT 리소스에 액세스하는 데 필요한 secret을 관리
- DB 자격 증명, API 키 및 기타 서비스에 대한 것을 관리할 수 있음
- KMS의 경우 서버 측 암호화를 함께 사용하면 이미 생성한 고객 관리 CMK를 지정할 수 있음 
	- 하드웨어와 소프트웨어를 결합해 클라우드에 맞게 확장된 키 완리 시스템을 제공하는 서비스
### Partition placement Group
- 파티션 배치 그룹
	- 워크로드의 요구사항을 충족하고 상호 의존적인 인스턴스 그룹의 배치에 영향을 줄 수 있음
	- 서로 다른 파티션에 있는 인스턴스 그룹과 하드웨어를 공유하지 않도록 인스턴스를 논리적 파티션에 분산
	- Hadoop, Cassandra, Kafja와 같은 대규모 분산 및 복제 워크로드에 사
- Cluster palcement Group
	- AZ내에서 인스턴스를 밀접하게 패키징 함
	- HPC 애플리케이션에서 사용되는 노드 간 통신에 필요한 낮은 지역 시간 네트워크 성능을 달성할 수 있음
### Transit Gateway
- 아마존 가상 사설 클라우드(VPC)와 사내 네트워크를 `단일 게이트웨이`에 연결할 수 있음
- 중앙 게이트웨이에엇 네트워크 전체의 각 아마존 VPC, 사내 데이터 센터 또는 원격 사무시로 연결되는 단일 연결만 생성하고 관리
- 스포크 역할을 하는 모든 연결될 네트워크 간에 트래픽이 라우팅되는 방식을 제어하는 허브 역할
- star network로 연결되고, Direct Connect를 통해 on-premises(사내 네트워크)로 연결 가능
### Role
- `StringNotEquals` 같이 not이 들어간 resource 정책을 유의
### Route53
- 여러 AWS 지역에 리소스가 있고 트래픽을 가장 낮은 대기 시간을 제공하는 지역으로 라우팅하고자 할 때 `latency based routing`을 사용 하면 리소스에 대한 대기 시간 레코드를 만들고 가장 적은 곳으로 라우팅
- 지역 기반을 선택할 경우 사용자의 지리적 위치를 기반으로 하기 때문에 지연 시간과는 상관이 없음 
	- 특정 지역을 통해서만 들어올 수 있도록 할 수 있기 때문에 유럽에서 접근하더라도 프랑크프루트로 고정하면 멀리서 접근 시 더 오래 걸릴 수도 있음
- 동일한 기능을 수행하는 여러 리소스가 있는 경우, route 53이 트래픽을 건강하지 않은 리소스에서 건강한 리소스로 라우팅하도록 DNS 페일오버를 구성할 수 있음
- storage gateway는 온프레미스 클라우드 스토리지에 무제한으로 액세스 할 수 있는 하이브리드 클라우드 스토리지 서비스
	- 자주 액세스하는 데이터를 온프레미스에 캐싱하여 지연 시간이 짧음
### Amazon FSx
- FSx Lustre
	- 고성능 파일 시스템을 관리할 수 있음
	- S3와 통합되어 데이터 세트를 Lustre 파일 시스템으로 쉽게 처리 가능
	- `리눅스 전용`
- FSx Window File Server
	- 윈도우 서버 기반
	- Microsoft Active Directory 통합과 같은 광범위한 관리 기능 제공
	- DFSR(분산 파일 시스템 복제) 서비스는 여러 서버에서 폴더를 동기화한 상태로 유지
	- Microsoft DFS를 사용하여 공유를 단일 폴더 구조로 구성할 수 있음
### launch template
- 온디맨드 인스턴스와 스팟 인스턴스를 모두 사용하여 여러 인스턴스 유형에 걸쳐 용량을 프로비저닝할 수 없음 -> 시작 설정을 만들어서 여러 시작 탬플릿에 적용하고 각각 인스턴스에 적용한다는 의미인듯
- 시작 탬플릿을 사용해 온디맨드 인스턴스와 스팟 인스턴스를 모두 사용해 여러 인스턴스 유형에 걸쳐 용량을 프로비저닝해 원하는 규모, 성능 등을 달성할 수 있는 것 -> 시작 설정으로 시작 탬플릿을 만들고 이를 인스턴스 유형에 포함시켜야 함
### replicate reda
 - 같은 리전에서 복제본을 전송하는데 비용이 부과되지 않음
### NFS
 - NFS 파일 시스템에 액세스할 수 있는 온프레미스 서버에 AWS DataSync 에이전트를 구성
 - 전용 VIF를 사용해 AWS DirectConnect 연결을 통해 EFS용 AWS PrivateLink 인터페이스 VPC 엔드포인트로 데이터 전송
 - S3로 데이터를 보낸 후 Lambda를 사용하는 것보다 효율적
### Lambda Role
- 람다와 S3 버킷 실행 역할이 다른 계정에 온 경우 S3 버킷 액세스 권한을 IAM 역할에 부여 후 버킷 정책이 람다 함수의 실행 역할에 대한 엑세스 권한을 부여하는지 확인해야함 
	- S3에 Lambda 기능에 대한 역할을 주는 것이지 Lambda function의 롤에 S3 권한을 주는 것이 아님
### User Data 
- 사용자 데이터는 인스턴스를 처음 시작할 때 `부팅 사이클` 동안에만 실시됨
- 인스턴스를 다시 시작할 때마다 사용자 데이터 스크립트와 clous-init directives(지침)이 필요
- 루트 권한으로 실행됨 
- 사용자 데이터가 인스턴스가 다시 시작될 때마다 실행되도록 하는 것은 기본 구성이 아닌 추가 명시 -> 기본은 처음 시작 시 부팅 사이클 동안만 실시
### Organization
- VPC를 생성하고 리소스 액세스 관리자를 사용해 서브넷 중 하나 이상의 다른 계정과 공유하도록 함
- Organization에서 관리하는 단일 리전 내에 여러 개의 aws 계정이 있으며 모든 계정의 모든 EC2 인스턴스가 개인적으로 통신할 수 있도록 함
- RAM(Resource Access Manager) 은 계정 또는 organization 내에서 리소스를 공유할 수 있도록 하는 서비스
- RAM은 여러 계정에 중복된 리소스를 생성할 필요가 없어 소유한 모든 단일 계정에서 해당 리소스를 관리하는 운영 오버헤드가 줄어듦
### KMS
- 새로운 리전에 버킷을 만들고 다른 리전의 버킷을 복제 -> KMS 다중 영역 키를 사용해 새로운  리전에 사용하도록 명시 -> 이전 데이터를 복제
- KMS는 여러 영역에서 동일한 키를 사용할 수 있도록 함
### Global Accelerator
- Blue/Green deployment 서로 다른 버전의 애플리케이션을 실행하는 동일한 두 환경간에 트래픽을 이동해 어플리케이션을 릴리즈하는 기술
- blue는 현재 실행중인 버전, green은 새 버전
- 현재 버전에 영향을 주지 않고 green 환경에서 기능 테스트 가능
- 기능 테스트가 성공적이라면 Blue환경에서 green 환경으로 경로를 변경할 수 있음
### EC2 Hibernate
- 인스턴스 재실행 시 종료 시간을 줄이기 위함
- hibernate를 사용해 인스턴스 메모리 RAM의 콘텐츠를 EBS 볼륨에 저장 -> 연결된 모든 데이터 유지
	- EBS 루트 볼륨이 이전 상태로 복원됨
	- RAM 내용이 로드
	- 이전 인스턴스에서 실행 중이던 프로세스가 다시 시작됨
	- 연결된 데이터 볼륨이 다시 연결되고 인스턴스가 ID를 유지
###  Glue ETL
- 압축 ㅍ파일 형식을 사용해 `정제된 영역(refined zone)`에 변환된 데이터를 작성 -> 임의의 쿼리를 작성할 수 있음
- 고객이 분석을 위해 데이터를 준비하고 로드하도록 함
- 분석가가 임의 쿼리에 사용하기 때문에 정제된 구역 데이터를 S3 Glacier Deep Archive로 전환할 수 없음
### SSE-C
- SSE-C: 고객 제공 키를 사용한 서버 측 암호화 -> S3에 개체 데이터를 저장하기 전에 암호화 후 다운로드 시 해독 요청, custom application
- 클라이언트 측 암호화: 클라이언트 측에서 데이터를 암호화 후 업로드 -> 암호화 프로세스, 암호화 키 모두 클라이언트에서 관리
- 
