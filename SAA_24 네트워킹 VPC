### CIDR, 비공개 및 공개 IP
- CIDR(사이더): 클래스 없는 도메인 간 라우팅
- IP 주소를 할당하는 방법
- 보안 그룹 규칙과 AWS의 네트워킹을 다룰 때 사용
- CIDR는 단순한 IP 범위를 정의하는 데 사용
	- /32로 끝나는 IP 주소는 IP 하나만 의미
	- 0.0.0.0/0이라면 모든 IP
	- 192.168.0.0/26는 IP 주소 64개
- CIDR 구성 요소
	- 기본 IP란 범위에 포함된 IP
		- 예시로 10.0.0.0 또는 192.168.0.0 등
	- 서브넷 마스크
		- IP에서 변경 가능한 비트의 개수를 정의
		- /0, /24 그리고 /32까지 있음
		- ex) /8은 서브넷 마스크 255.0.0.0과 동일
		- /16은 255.255.0.0과 동일
- IP 주소/32는 2의 0승으로 IP 하나만 허용
- IP 주소/31이라면 두 가지 IP가 허용됨
	- 192.168.0.0과 192.168.0.1 
- 동일한 IP 주소/30의 경우 기하급수적으로 증가하는데 IP 네 개가 허용되어 .0부터 .3까지 범위가 더 넓어짐
- /29는 IP 여덟 개를 허용하고 범위는 .0부터 .7
- /28은 .0부터 .15까지 IP 16개를 허용
- /24은 256개, 즉 2의 8승 개 IP가 있고, 범위는 .0부터 .255까지
- /16은 2의 16승 개 IP가 바뀌니까 65,536개가 됨 -> IP 마지막 두 자리가 바뀜
- /0은 모든 IP를 허용
- IP는 옥텟 네 개로 구성됨
	- /32는 옥텟 변경 불가
	- /24는 마지막 옥텟 변경 가능
	- /16은 마지막 옥텟 두 개가 변경되고 다른 값을 가짐
	- /8은 마지막 옥텟 세 개가 바뀜
	- /0은 옥텟 전체가 변경됨
- 192.168.0.0/24는 무슨 의미일까?
	- /24는 마지막 옥텟을 변경할 수 있으므로 IP가 256개라는 뜻
		->마지막 옥텟이 0부터 시작해서 255까지를 포함해서
-  192.168.0.0/16은?
	- /16은 옥텟 마지막 두 개가 변경됨
	- 즉 IP 65,536개가 있음
- 134.56.78.123/32 은?
	- /32는 IP가 한 개
- 0.0.0.0/0은 전체 IPv4 공간
- 공용 IP와 사설 IP 차이는?
	- Internet Assigned Numbers Authority 즉 IANA에서 구축한 특정 IPv4 주소 블록은 사설 LAN 네트워크(로컬 네트워크)나 공용 인터넷 주소임
	- 사설 IP는 특정 값만 허용
		- 주소가 10.0.0.0/8일 때 범위는 IP가 엄청나게 많아 대형 네트워크에서 사용
		-  172.16.0.0/12는 또 다른 사설 IP 주소 세트
- 계정을 생성할 때 AWS에서 제공하는 기본 VPC는 해당 네트워킹 공간에 포함됨
	- 192.168.0.0/16은 홈 네트워크
- 장치를 연결할 때 인터넷 라우터가 있으면 192로 시작하는 IP 주소를 흔히 사용

### 기본 VPC 개요
- 새로운 AWS 계정은 모두 기본 VPC가 있고, 바로 사용 가능
- 새로운 EC2 인스턴스는 서브셋을 지정하지 않으면 기본 VPC에 실행됨
- 계정을 시작하면 VPC는 하나만 생김
- 기본 VPC는 처음부터 인터넷에 연결돼 있어서 인스턴스가 인터넷에 액세스하고 또 내부의 EC2 인스턴스는 공용 IPv4 주소를 얻습니다 EC2 인스턴스를 생성하자마자 연결할 수 있음
- EC2 인스턴스를 위한 공용 및 사설 IPv4 DNS 이름 있음
- VPC에서 IPv4 CIDR 블록을 확인할 수 있고, 범위 내 첫 번째 IP와 마지막 IP가 /16이면 IP의 마지막 옥텟 두 개가 변경될 수 있다는 뜻으로 .255.255까지 가능
	- 범위 내 IP는 65,536개
- CIDR에 IP 하나만 생성되고, VPC와 연결됨
- IPv6 CIDR는 없고 플로우 로그는 비활성
- 각 서브넷에는 고유 IPv4 CIDR가 있고, 서브넷마다 다른 AZ에 위치
- 기본 서브넷에 생성된 EC2 인스턴스는 전부 공용 IPv4를 가짐
- 라우팅  테이블은 트래픽이 VPC를 통해 경로를 선택하도록 도움
- 인터넷 게이트웨이가 VPC에 연결되어 있고, VPC에 위치한 EC2 인스턴스에 인터넷 액세스를 제공함 -> EC2 인스턴스가 인터넷 액세스를 가질 수 있게 됨
- 라우팅 테이블은 명시적으로 연결된 서브넷은 없지만 암시적으로 연결된 경우는 있음 -> 서브넷에 할당된 라우팅 테이블이 없을 때 기본 라우팅 테이블은 무조건 할당해줌
### VPC 개요
- Virtual Private Cloud를 줄여 VPC
- 단일 AWS 리전에 여러 VPC를 둘 수 있음
- 리전당 최대 5개까지 가능
- VPC마다 할당된 CIDR는 다섯 개
- 각 CIDR의 최소 크기는 /28로 IP 주소는 최소 16개가 있고, 최대 크기는 /16으로 IP 주소는 최대 65,536개
- VPC가 사설 리소스이기 때문에 사설 IPv4 범위만 허용됨
- VPC CIDR가 다른 VPC나 네트워크 혹은 기업 네트워크와 겹치지 않도록 주의

### 서브넷 개요
- 서브넷을 두 개 만든다고 가정 하나는 공용 서브넷이고, 다른 하나는 사설 서브넷
	-> 모두 한 가용 영역에 있음
- 서브넷이란 VPC 내부에 있는 IPv4 주소의 부분 범위
- 이 범위 내에서 AWS가 IP 주소 다섯 개를 예약함
- IP 주소 처음 네 개, 마지막 한 개를 서브넷마다 예약 -> 이 IP 주소는 사용도 안 되고, EC2 인스턴스에 IP로 할당되지도 못함
- 예를 들어 CIDR 블록 10.0.0.0/24가 있다면 일부는 예약된 IP 주소
- 첫 번째는 네트워크 주소
- **AWS는 두 번째 .1을 VPC 라우터용으로 예약하고, 10.0.0.2를 Amazon 제공 DNS에 매핑**
- 3은 당장 사용되진 않지만 나중에 필요할지 모르니까 예약함
- 네트워크 브로드캐스트 주소인 .255도 있는데 AWS는 VPC에서 브로드캐스트를 지원하지 않기에 예약은 되지만 사용하는 건 안 됨
- **EC2 인스턴스 서브넷에서 IP 주소 29개가 필요할 때 /27 서브넷은 사용 못 함!**
- /27 IP 주소는 32개인데 예약된 IP 주소 다섯 개를 제외하면 27개만 남기 때문
- 29개가 필요하댔는데 그보다 작기 떄문에 서브넷 크기는 /26이어야 함
	- 서브넷에 IP 주소 64개를 제공하기 때문
- 예약된 IP 주소 다섯 개를 제거하면 59개가 되므로 필요한 29개보다 훨씬 많음

### 인터넷 Gateway 및 라우팅 테이블
- 서브넷에 인터넷 액세스를 연결하는 방법?
- **인터넷 Gateway**는 VPC의 리소스를 인터넷에 연결하도록 허용하는 EC2 인스턴스나 람다 함수 등
- 수평으로 확장되고 가용성과 중복성이 높음 -> 관리형 리소스
- VPC와는 별개로 생성해야 하고, VPC는 인터넷 Gateway 하나에만 연결되며 반대의 경우도 마찬가지
- 인터넷 Gateway 자체는 인터넷 액세스를 허용하지 않음 -> 라우팅 테이블 수정이 필요
- 라우팅 테이블을 수정해서 EC2 인스턴스를 라우터에 연결하고, 인터넷 Gateway에 연결 -> 인터넷 Gateway가 인터넷과 연결될 수 있음

### Bastion 호스트
- 사용자가 프라이빗 서브넷에 없는 EC2 인스턴스에 액세스하고자 함
- 사용자는 퍼블릭 인터넷에 있음 ->  사용자의 EC2 인스턴스가 프라이빗 서브넷에 위치하지 않기 때문
- 프라이빗 서브넷에 대한 인터넷 액세스는 없음
- 배스천 호스트는 EC2 인스턴스인데 이 EC2 인스턴스는 **퍼블릭 서브넷**에 있음
- 배스천 호스트 보안 그룹이라는 자체 보안 그룹이 필요
- 프라이빗 서브넷에 있는 EC2 인스턴스에도 보안 그룹도 필요
- 퍼블릭 서브넷에 있는 EC2 인스턴스 즉, 배스천 호스트로 프라이빗 서브넷에 있는 EC2 인스턴스에 액세스할 수 있음 ->  VPC가 존재하기 때문
- 프라이빗 서브넷에 있는 EC2 인스턴스에 액세스하려면 먼저 SSH를 배스천 호스트에 연결하고, 이 배스천 호스트가 다시 SSH를 프라이빗 서브넷의 EC2 인스턴스에 연결해야 함
- 배스천 호스트를 통해 프라이빗 EC2 인스턴스에 SSH로 액세스할 수 있고, 베스천은 꼭 퍼블릭 서브넷에 있어야 함
- 배스천 호스트를 위해서는 **보안 그룹이 반드시 인터넷 액세스를 허용**해야 함
- 하지만 모든 인터넷 액세스를 허용하면 보안상 위험이 크기 때문에 가령 기업의 퍼블릭 CIDR 액세스만 허용하거나 사용자의 인터넷 액세스만 허용하는 등 제한을 둠
- 배스천 호스트의 EC2 보안 그룹을 최대한 제한하여 특정 IP만 액세스가 가능하도록 설정할 수 있음
- 프라이빗 서브넷의 EC2 인스턴스 보안 그룹에서는 반드시 SSH 액세스를 허용해야 함
	- 포트 22번이 배스천 호스트의 프라이빗 IP가 되거나 배스천 호스트의 보안 그룹 되는 것
- 트래픽, 즉 EC2 인스턴스가 배스천 호스트를 이용하여 연결되기 때문

### NAT 인스턴스
- 구형 NAT 인스턴스
- NAT Gateway는 최신
- NAT는 네트워크 주소 변환을 뜻함
- NAT 인스턴스는 사설 서브넷 EC2 인스턴스가 인터넷에 연결되도록 허용함
- NAT 인스턴스는 공용 서브넷에서 실행되어야 하고, 공용 및 사설 서브넷을 연결함
- **소스/목적지 확인은 비활성화**
- NAT 인스턴스에는 고정된 탄력적 IP가 연결되어야 함
- 예를 들어 공용 서버이며 IP는 50.60.4.10인 서버가 있음. 이때 사설 서브넷에서 액세스하려면 공용 서브넷에 고유의 보안 그룹이 있는 NAT 인스턴스를 실행하면 됨
- 다음은 NAT 인스턴스에 탄력적 IP를 연결
- 라우팅 테이블을 수정하여 사설 서브넷과 공용 서브넷의 두 서브넷에 있는 EC2 인스턴스로부터 NAT 인스턴스로 트래픽을 전송하도록 함
- 인스턴스의 IP는 공용 서버로 액세스하는데 NAT 인스턴스를 통과해야 함
- 요청에는 소스 IP가 10.0.0.20 즉 사설 IP이고, 목적지는 50.60.4.10인데 NAT 인스턴스는 트래픽을 다른 곳으로 전송하려는 것을 깨닫고, 해당 서버로 트래픽을 보냄
- 목적지 IP는 같지만 소스 IP는 12.34.56.78일 경우 NAT 인스턴스의 공용 IP에 해당됨
- 네트워크 패킷이 NAT 인스턴스로 재작성됨 -> NAT 인스턴스가 하는 일이 네트워크 패킷의 재작성, 그래서 소스 IP가 변경됨
- 이제 서버에서 응답하는데 소스는 자기 자신이고, 목적지는 NAT 인스턴스의 공용 IP가 됨
- NAT 인스턴스가 다시 EC2 인스턴스로 트래픽을 회신
- 소스는 공용 서버이고, 목적지는 사설 IP로 일부의 IP가 재작성되고, 또 NAT 인스턴스를 위해 소스 및 목적지 확인 설정을 EC2 인스턴스에서 비활성화해야 함
- NAT 인스턴스의 작동 방식을 크게 보면 공용 서브넷에 NAT 인스턴스를 생성하고, 거기에 탄력적 IP를 연결
- 그리고 라우팅 테이블을 통해 사설 인스턴스가 NAT 인스턴스에서 인터넷 Gateway까지 통신하도록 함
- NAT 인스턴스를 보면, 사전 구성된 Amazon Linux AMI를 사용할 수 있었지만 지원이 종료되어 NAT Gateway를 권장하며 NAT 인스턴스는 가용성이 높지 않고, 초기화 설정으로 복원할 수 없어서 여러 AZ에 ASG를 생성해야 하고, 복원되는 사용자 데이터 스크립트가 필요하기에 꽤 복잡함 그리고 작은 인스턴스는 큰 인스턴스에 비교해서 대역폭이 더 작음 또한 보안 그룹과 규칙을 관리해야 함
- 인바운드에서는, 사설 서브넷의 HTTP/HTTPS 트래픽을 허용하고, 홈 네트워크의 SSH도 허용함, 아웃바운드에서도 트래픽이 나가도록 함
### NAT Gateway
- NAT Gateway는 AWS의 관리형 NAT 인스턴스이며 높은 대역폭을 가지고 있음
- 가용성이 높으며 관리할 필요가 없음
- 사용량 및 NAT Gateway의 대역폭에 따라 청구됨
- NAT Gateway는 특정 AZ에서 생성되고 탄력적 IP를 이어받음
- EC2 인스턴스와 같은 서브넷에서 사용할 수 없어서 다른 서브넷에서 액세스할 때만 NAT Gateway가 도움 됨
- 공용 서브넷에서 NAT Gateway를 만들고, 사설 서브넷의 인스턴스와 연결
- 경로는 사설 서브넷에서 NAT Gateway로 다시 인터넷 게이트웨이까지
- 즉 **NAT Gateway에는 인터넷 게이트웨이가 있어야 함**
- 대역폭은 초당 5GB이며 자동으로 초당 45GB까지 확장할 수 있음
- 보안 그룹을 관리할 필요가 없음 -> 연결을 위해 어떤 포트를 활성화할 지 고려하지 않아도 됨
- 사설 인스턴스와 서브넷이 있고 인터넷에 액세스가 없음
- NAT Gateway를 공용 서브넷에 배포함
- NAT Gateway가 공용 서브넷에 있으므로 공용 서브넷은 이미 인터넷 게이트웨이에 연결됐고, NAT Gateway에 인터넷 연결이 생김
- 사설 서브넷의 루트를 수정해 EC2 인스턴스를 NAT Gateway에 연결할 수 있음
- NAT Gateway의 고가용성에 대해 살펴보면 NAT Gateway은 단일 AZ에서 복원 가능하고, 단일 AZ 내에서만 중복되지만 AZ가 중지될 경우를 위해 다중 NAT Gateway를 여러 AZ에 두면 결함 허용을 할 수 있음
- 하나의 NAT Gateway가 하나의 특정 AZ에 있음
- 두 번째 AZ에 두 번째로 NAT Gateway를 생성
- 각 네트워크 트래픽은 AZ 안에 제한됨 -> AZ가 중지되면 전체 AZ가 중지되는 것
- 하지만 AZ-B에도 NAT Gateway가 있어서 잘 작동 됨
- 라우팅 테이블을 통해 AZ를 서로 연결할 필요는 없음
- 만약 AZ가 중지되면 그 AZ의 EC2 인스턴스가 액세스 불가 상태가 됨
- NAT Gateway는 특정 AZ에서 가용성이 높음
- AZ 전체에서 고가용성을 필요로 하는 경우 다른 AZ에 더 만들어야 합니다 반면 NAT 인스턴스는 인스턴스간 장애 조치 스크립트를 통해서 전체적인 관리를 해야 함
- 대역폭은 NAT Gateway마다 초당 최대 45GB
- 인스턴스에서는 사용하는 EC2 인스턴스에 따라 다른데 고급 인스턴스 유형일수록 더 많은 처리량을 가짐
- 유지 보수의 경우 NAT Gateway는 관리형 서비스이며, NAT 인스턴스는 사용자가 하고, OS 패치 등 소프트웨어가 필요
- 비용의 경우 시간당 비용과 NAT Gateway의 데이터 전송량을 더하고 반면 NAT 인스턴스는 시간당 EC2 인스턴스가 청구되며 EC2 인스턴스 유형과 크기에 따라 달라짐
- EC2 인스턴스를 통해 인터넷으로 나가는 네트워크 비용도 함께 청구됨
- NAT Gateway는 공용 IPv4와 사설 IPv4를 가지고 있으며 NAT 인스턴스도 같음
- NAT Gateway는 보안 그룹을 사용하지 않지만 NAT 인스턴스는  보안 그룹을 설정 필요
- NAT Gateway는 Bastion 호스트로 쓸 수 없고, NAT 인스턴스는 필요한 경우 Bastion 호스트로도 가능
### NACL 및 보안 그룹
- 보안 그룹 및 네트워크 ACL(NACL)
- 서브넷 보안 단계가 NACL임
- 들어오는 요청의 NACL 역할은 요청이 EC2 인스턴스 내부로 이동하는 것
- 요청이 서브넷에 들어가기 전 먼저 NACL로 이동
- NACL에는 몇 가지의 인바운드 규칙이 정의되며 요청이 허용되지 않으면 내부로 들어갈 수 없음
- 첫 번째 요청이 NACL을 통과해서 서브넷 내부에 도달 후 보안 그룹 인바운드 규칙을 만남
- 만약 그 요청이 명시적으로 허용 받지 못하면 거부됨 
- 보안 그룹의 특징은 상태 유지
- NACL은 무상태이고 보안 그룹은 상태 유지
-  만약 요청이 보안 그룹의 인바운드 규칙을 통과해서 EC2 인스턴스에 도달하면 EC2 인스턴스는 그 응답으로 애플리케이션 관점에서 응답할 내용을 모두 회신
- 아웃바운드 규칙은 자동으로 보안 그룹 수준에서 허용됨
- 보안 그룹의 특징이 상태 유지이기 때문 -> 들어간 것은 전부 나올 수 있음
- 보안 그룹 수준에서 아웃바운드 규칙이 항상 허용되는 이유가 상태 유지인데 NACL은 상태 없음 즉 무상태이고 NACL 아웃바운드의 규칙이 평가됨
- 규칙이 통과하지 못하면 요청도 통과하지 못함
- 보안 그룹에서 EC2 인스턴스가 아웃바운드 요청을 함 -> 외부로 바인딩 된 요청을 하는 것
- EC2 인스턴스는 먼저 www.google.com 등에 접속할 수 있는데 처음으로 평가될 규칙은 보안 그룹 아웃바운드 규칙
- 트래픽이 EC2 인스턴스에서 웹으로 나가도록 허용할지 결정
- 규칙이 적절하고 요청이 허가되면 요청은 또한 NACL 아웃바운드 규칙을 통과
- 평가된 요청이 www.google.com에 도달하고, Amazon 웹 서비스로 다시 돌아오는 것
- NACL이 무상태라서 NACL 인바운드 규칙이 평가될 수 있음
- 마지막으로 보안 그룹 수준에서 서브넷의 인바운드 규칙은 무조건 허용됨
- 보안 그룹 규칙의 상태 유지 특징 때문 따라서 예시의 보안 그룹 인바운드 규칙은 동일
- 아웃바운드 규칙은 이미 허용되었고, 보안 그룹은 상태 유지이기 때문
- 네트워크 액세스 제어 목록인 NACL은 무엇일까?
- 서브넷을 오가는 트래픽을 제어하는 방화벽과 비슷함
- 서브넷마다 하나의 NACL이 있고, 새로운 서브넷에는 기본 NACL이 할당됨
- NACL 규칙 정의에서 규칙에는 숫자가 있고, 범위는 1부터 32,766까지
- 숫자가 낮을수록 우선순위가 높아서 우선순위가 제일 높은 것은 1 가장 낮은 것은 32,766
- 마지막 규칙은 별표로 일치하는 규칙이 없으면 모든 요청을 거부
- AWS는 규칙을 100씩 추가하는 것을 권장함
- 새로 만들어진 NACL은 기본적으로 모두를 거부함
- NACL 사용 사례
	- 서브넷 수준에서 특정한 IP 주소를 차단하는데 적합
	- NACL은 서브넷 수준에 있으니 공용 서브넷 및 사설 서브넷 등에 위치
	- 기본 NACL은 시험에서 정말 중요한 부분
	- 기본 NACL는 연결된 서브넷을 가지고, 인바운드와 아웃바운드의 모든 요청을 허용하는 특수성을 가짐
	- IPv4를 지원하는 기본 NACL의 모습인데 모든 것이 나가고 들어올 수 있음
	- NACL이 모든 것을 드나들도록 허용하지 않으면 AWS를 시작할 때 심각한 디버깅을 해야 함
- 기본 NACL은 매우 개방적이어서 기본 NACL을 수정하지 않는 것을 추천
- 사용자 정의 네트워크 ACL이 필요하다면 만들 수 있음
- 예를 들어 기본 NACL이 기본적으로 서브넷과 연결된다면 즉 이 NACL이 서브넷과 연결되어 있다고 말하면 모든 것이 드나들도록 허용된다는 뜻
- 임시 포트
	- 클라이언트와 서버가 연결되면 포트를 사용해야 함
	- 즉 IP 주소와 포트가 있음
	- 클라이언트는 규정된 포트의 서버에 연결함
	- 예를 들어 HTTP 포트는 80 HTTPS 포트는 443 SSH 포트는 22 등
	- 클라이언트가 서버에서 회신 받을 때는 제외하고 서버가 서비스를 올릴 때 클라이언트는 규정된 포트에 접속
	- 서버도 응답을 하려면 클라이언트에 연결해야 함
	- 클라이언트는 기본적으로 개방된 포트가 없어서 클라이언트가 서버에 접속할 때 자체적으로 특정한 포트를 열게 되는데 이 포트는 임시라서 클라이언트와 서버 간 연결이 유지되는 동안만 열려 있음
	- OS에 따라 즉 운영 체제에 따라 포트 범위가 달라짐
	- Windows 10을 사용하면, 49152에서 65,535까지가 무작위 임시 포트로 선택된 포트 범위, Linux를 사용할 경우 범위는 32768에서 60999까지
- 클라이언트가 웹 서버에 연결되며 웹 서버에는 고정 IP 및 고정 포트가 있을 때 클라이언트에 이렇게 IP가 있고, 한 번의 요청 또는 연결에만 임시 포트 50105를 개방하려고 함
- 클라이언트에서 서버로 전송된 요청에는 목적지 IP 정보와 서버가 연결할 목적지 포트 요청과 관련된 페이로드가 있음
- 소스 IP는 응답을 위한 것이고, 응답을 위한 소스 임시 포트인 50105
- 웹 서버가 다시 회신을 위해서 클라이언트와 연결될 때 이런 응답을 보냄
- 소스 IP와 소스 포트 정보 그리고 서버 포트 정보가 있고 목적지 IP는 11.22.33.44 으로 응답 페이로드임
- 포트가 필요하면 클라이언트가 전송했던 임시 포트를 재사용
- 임시 포트라고 불리는 것은 연결 수명을 위해서만 할당되는 무작위 포트이기 때문
- 클라이언트가 데이터베이스에 연결된다고 가정할 때 사설 및 공용 서브넷이 있고, 각 서브넷에 연결된 NACL이 하나 있음 -> 웹 NACL과 DB NACL
- 클라이언트가 데이터베이스 인스턴스에 연결을 시작하면 허용되어야 하는 규칙은?
- 첫 번째 NACL은 포트 3306를 통해 TCP부터 데이터베이스의 서브넷 CIDR까지 아웃바운드를 허용해야 요청이 서브넷을 떠나지 않음
- 데이터베이스 측에서는 DB NACL가 웹 서브넷 CIDR에서 포트 3306으로 TCP를 인바운드함
- 데이터베이스가 클라이언트로 요청에 회신을 할 때?
- 클라이언트에게는 임시 포트가 있고, 요청에 대해 무작위 포트가 할당됨
- DB NACL은 포트 및 임시 포트에서 아웃바운드 TCP를 허용하는데 범위는 1,024에서 65,535
- 웹 서브넷 CIDR로 아웃바운드 되면 웹 NACL은 DB 서브넷 CIDR의 임시 포트 범위에서 인바운드 TCP를 허용해야 함
- NACL의 또 다른 특징은 다중 NACL 및 서브넷이 있다면 각 NACL 조합이 NACL 내에서 허용되어야 함 -> CIDR 사용 시, 서브넷이 고유의 CIDR을 갖기 때문
- **NACL에 서브넷을 추가하면 NACL 규칙도 업데이트해서 연결 조합이 가능한지 확인해야 함**
- 보안 그룹과 NACL의 차이점?
	- 보안 그룹은 인스턴스 수준에서 작동하는데 NACL은 서브넷 수준에서 작동됨
	- 보안 그룹은 허용 규칙을 지원하지만 NACL은 허용과 거부 규칙을 모두 지원
	- NACL에서는 특정 IP 주소를 거부할 수 있음
	- 보안 그룹은 상태 유지이며 규칙과 무관하게 트래픽을 허용하고, NACL은 무상태이기 때문에 인바운드와 아웃바운드 규칙이 매번 평가되고, 임시 포트를 리마인더
	- 보안 그룹에서는 모든 규칙이 평가되고, 트래픽 허용 여부를 결정하지만 NACL에서는 가장 높은 우선순위를 가진 것이 먼저 평가됨 -> 첫번째 비교로 끝
	- 보안 그룹은 누군가 지정할 때 EC2 인스턴스에 적용되지만 NACL은 거기에 연결된 서브넷의 모든 EC2 인스턴스에 적용됨

### VPC 피어링
- 다양한 리전과 계정에서 VPC를 생성할 수 있는데 AWS 네트워크를 통해 연결하고 싶을 때 사용 하는데 언제 필요할까?
- VPC가 모두 같은 네트워크에서 작동하도록 만들기 위해서 사용
- VPC는 다른 리전 및 계정 또는 같은 계정에도 있어서 이들을 연결하거나 연결하지 않고 싶다면 VPC 네트워크 CIDR가 서로 멀리 떨어져야 함
- 연결했을 때 CIDR가 겹치면 통신을 할 수 없기 때문
- VPC 피어링은 두 VPC 간에 발생하며 전이되지 않음
- **서로 다른 VPC가 통신하려면 VPC 피어링을 활성화해야 함**
- 세 개의 VPC인 A, B, C가 있다고 가정, A와 B 사이에 피어링 연결을 만들 수 있고, 서로 연결됨. 그리고 B와 C 사이에​​다른 피어링 연결을 생성하면 서로 통신 가능. 하지만 A와 B, 그리고 B와 C가 연결되어 있더라도 A와 C의 VPC 피어링 연결을 활성화해야 그 둘이 통신을 할 수 있음
- VPC 피어링이 있을 때 활성화는 당연하고 VPC 서브넷 상의 루트 테이블도 업데이트해서 EC2 인스턴스가 서로 통신할 수 있게 함
- 계정에서 할 수 있지만 다른 계정 간에도 가능 -> 계정 A에서 계정 B로 VPC를 연결할 수 있음, 리전 간 연결도 가능
- 보안 그룹에서 다른 보안 그룹을 참조할 수 있었는데 동일 리전의 계정 간 VPC에서도 보안 그룹을 참조할 수도 있음
- CIDR이나 IP를 소스로 가질 필요가 없고, 보안 그룹을 참조할 수도 있음
- VPC 피어링 연결을 추가해서 서로 다른 VPC를 연결
### VPC Endpoint
- AWS에서 DynamoDB와 같은 서비스를 이용한다고 하면 퍼블릭 액세스가 가능한데 NAT Gateway나 인터넷 게이트웨이 또는 인터넷 게이트웨이를 통해 DynamoDB에 액세스할 수 있지만 모든 트래픽은 퍼블릭 인터넷을 거쳐서 옴
- CloudWatch와 Amazon S3 등의 서비스를 이용할 때는 인터넷을 경유하지 않고, 프라이빗 액세스를 원할 수도 있음
- VPC 엔드포인트를 사용하면 퍼블릭 인터넷을 거치지 않고도 인스턴스에 액세스할 수 있음
- 프라이빗 AWS 네트워크만 거쳐서 바로 해당 서비스에 액세스할 수 있음
- NAT Gateway가 있는 퍼블릭 서브넷 EC2 인스턴스, 프라이빗 서브넷, 인터넷 게이트웨이가 있다고 가정, Amazon SNS 서비스에 세 가지 방법으로 액세스할 수 있음
- 프라이빗 서브넷과 그 안에 있는 EC2 인스턴스에서 Amazon SNS 서비스에 액세스한다고 할 때 먼저 EC2 인스턴스에서 NAT Gateway를 거쳐 인터넷 게이트웨이로 향함
- Amazon SNS 서비스에 퍼블릭으로 액세스 함
- 퍼블릭 서브넷에 있는 EC2 인스턴스의 경우도 같이 인터넷 게이트웨이에서 바로 Amazon SNS 서비스로 향함 -> 비용이 많이 발생
	- NAT Gateway를 거칠 때 비용이 발생하고, 그 다음 인터넷 게이트웨이에서는 비용이 발생하지 않지만 허브가 여러 개 있어 효율적이지 않음
- Amazon SNS 서비스 예시
	- VPC 엔드포인트가 추가되었을 경우 VPC 엔드포인트는 VPC 내에 배포됨
	- 네트워킹을 구성해서 프라이빗 서브넷에 있는 EC2 인스턴스를 VPC 엔드포인트를 거쳐 직접 Amazon SNS 서비스에 연결할 수 있는데 이때 네트워크가 AWS 내에서만 이루어진다는 장점이 있음
	- 모든 AWS 서비스는 퍼블릭에 노출되어 있고 퍼블릭 URL을 갖음
	- VPC 엔드포인트를 사용하면 AWS PrivateLink를 통해 프라이빗으로 액세스하므로 AWS에 있는 모든 서비스에 액세스할 때 퍼블릭 인터넷을 거치지 않고도 프라이빗 네트워크를 사용할 수 있음
	- VPC 엔드포인트는 중복과 수평 확장이 가능하고, 인터넷 게이트웨이나 NAT Gateway 없이도 AWS 서비스에 액세스할 수 있게 해주므로 네트워크 인프라를 상당히 간단하게 만들 수 있음
	- VPC에서 DNS 설정 해석이나 라우팅 테이블을 확인하면 됨
- 두 가지 VPC 엔드포인트 유형
	- PrivateLink를 이용하는 인터페이스(Interface) 엔드포인트와 게이트웨이(Gateway) 엔드포인트가 있음
		- 인터페이스 엔드포인트는 ENI를 프로비저닝하는데 ENI는 VPC의 프라이빗 IP 주소이자 AWS의 엔트리 포인트
		- ENI가 있으므로 반드시 보안 그룹을 연결해야 함
		- 대부분의 AWS 서비스를 지원하고, 청구되는 요금은 시간 단위 또는 처리되는 데이터 GB 단위로 청구됨
		- 프라이빗 서브넷에 EC2 인스턴스가 있고, PrivateLink를 사용하는 인터페이스 유형 VPC 엔드포인트로 ENI를 통하여 이 서비스에 액세스할 수 있음 -> 모든 서비스에서 이용 가능
	- 게이트웨이 엔드포인트
		- 게이트웨이를 프로비저닝하는데 이때 게이트웨이는 반드시 라우팅 테이블의 대상이 되어야 함
		- **IP 주소를 사용하거나 보안 그룹을 사용하지 않고 라우팅 테이블의 대상이 되는 것**
		- 게이트웨이 엔드포인트 대상으로는 Amazon S3와 DynamoDB 두 가지가 있음
		- 장점은 요금이 무료이고, 라우팅 테이블 액세스일 뿐이므로 자동으로 확장된다는 점
		- Amazon S3와 DynamoDB에서만 지원된다는 점
- 인터페이스 엔드포인트는 모든 서비스를 지원하고, 게이트웨이 엔드포인트가 Amazon S3와 DynamoDB만 지원한다면 Amazon S3나 DynamoDB에는 둘 중 어떤 엔드포인트를 써야 할까?
	- 게이트웨이 엔드포인트와 인터페이스 엔드포인트가 있는데 게이트웨이 엔드포인트를 선택하는 것이 유리 -> 라우팅 테이블만 수정하면 되기 때문
	- 앱에서 Amazon S3에 무료로 액세스할 수도 있음
- 게이트웨이 엔드포인트는 비용이 들지 않고 확장성이 더 높지만 인터페이스 엔드포인트를 사용하면 비용이 발생
- 게이트웨이 엔드포인트보다 인터페이스 엔드포인트가 권장되는 경우는 온프레미스에서 액세스해야 할 필요가 있을 때
- 온프레미스에 있는 데이터 센터에 프라이빗으로 액세스해야 하는 경우 Site-to-Site VPN이나 직접 연결 방법이 있음
- 다른 VPC에 연결할 때도 인터페이스 엔드포인트 유형을 사용하는 편이 좋음
- 대부분 Amazon S3에서는 게이트웨이 엔드포인트가 유리
###  VPC Flow 로그
-  VPC Flow Logs를 사용하면 여러분의 인터페이스로 들어오는 IP 트래픽에서 정보를 포착할 수 있음
- VPC 수준이나 서브넷 수준 또는 탄력적 네트워크 인터페이스 수준에서 포착할 수 있음
- VPC에서 일어나는 연결 문제를 모니터링하고 해결하는 데 유용
- 흐름 로그를 Amazon S3, CloudWatch Logs, Kinesis Data Firehose에 전송할 수 있음
- ELB, RDS, ElastiCache, Redshift, WorkSpaces, NATGW, Transit Gateway 등
- AWS의 관리형 인터페이스에도 전송할 수 있음
- 버전, 인터페이스 ID, 소스 주소, 대상 주소, 소스 포트, 대상 포트, 프로토콜, 패킷, 바이트 수, 시작, 끝, 액션, 로그 상태가 있음 -> VPC로 가는 네트워크 패킷에 관한 메타데이터 
- 소스 주소와 대상 주소는 문제가 있는 IP를 식별하는 데 도움을 주고, 어떤 IP가 반복적으로 거부되는 걸 보면, 그 IP에 문제가 있을 수 있다는 점을 알 수 있음
	- 특정한 IP로부터 공격을 받고 있을 수도 있음
- 소스 포트와 대상 포트는 여러분이 문제가 있는 포트를 식별하는데 유용
- 액션은 수락 또는 거부가 되는데 보안 그룹 또는 NACL 수준에서 성공 혹은 실패 여부를 알려주는 것
- VPC Flow Logs를 이용해서 사용 패턴을 분석하거나 악의적인 행동이나 포트 스캔 등을 탐지할 수 있음
- Flow Logs를 쿼리하는 방법은 두 가지
	- 최적의 방법은 Athena를 S3에 사용하는 방법, 또는 스트리밍 분석을 원한다면 CloudWatch Logs Insights를 사용할 수도 있음
	- Flow Logs를 이용해서 어떻게 보안 그룹과 NACL이슈를 해결할 수 있을까?
		- ACTION 필드를 확인 -> NACL과 서브넷에 유입되는 요청을 확인할 수 있음
		- NACL은 상태가 없고, 보안 그룹에는 상태가 있음
		- Inbound REJECT가 되면 외부로부터 우리 EC2 인스턴스로 유입되는 요청이 거절되는데 NACL이 요청을 거부하거나 보안 그룹이 요청을 거부한다는 의미
		- Inbound ACCEPT, Outbound REJECT라면 NACL만의 이슈라는 뜻
		- 보안 그룹은 상태가 있기 때문
		- ACCEPT에서 알 수 있듯이 인바운드가 허용된다면 보안 그룹의 상태 덕분에 아웃바운드도 자동적으로 허용됨
		- 그럼 나가는 요청에 대해서도 비슷한 분석이 가능
		- Outbound REJECT라면 NACL이나 보안 그룹에 이슈가 있다는 뜻
		- 하지만 Outbound ACCEPT이고 Inbound REJECT라면 반드시 NACL에 이슈가 있는 것
 - 흐름 로그가 CloudWatch Logs로 갈 수 있고, CloudWatch Contributor Insights라는 걸 이용해서, 예를 들어 네트워크에 가장 많이 기여하는 상위 10개 IP 주소를 확인할 수 있음
 - VPC Flow Logs를 사용해서 그것들을 역시 CloudWatch Logs로 전송할 수도 있음
 - 메트릭 필터를 설정해서 예를 들어 SSH 또는 RDP 프로토콜을 검색할 수 있음
 - 평소보다 SSH 또는 RDP가 있다는 걸 알게 되면, CloudWatch Alarm을 트리거할 수 있음
 - Amazon SNS 토픽에 경보를 전송할 수도 있음
 - VPC Flow Logs를 사용하고 모든 걸 S3 버킷에 전송해서 저장할 수 있고, Amazon Athena를 사용해서 SQL로 된 VPC Flow Logs를 분석할 수 있고, Amazon QuickSight로 그걸 시각화할 수도 있음
### VPC Flow  기록 및 Athena
- 흐름 로그에 유형 -> DemoS3FlowLog
- 필터가 있는데 수락형, 거부형, 또는 모든 종류의 트래픽을 선택할 수 있음
- 어떤 트래픽이 통과되지 않는지 디버깅을 하려고 한다면 거부형이 더 적절하고 그렇지 않으면 All
- 최대 집계 주기에서는 정보를 확인하기 위해 집계를 얼마나 오래 기다려야 하는지를 지정
- 전송 대상을 CloudWatch Logs로 할 수 있고, 로그 그룹을 지정해야 함
- Amazon S3 버킷에도 전송할 수 있음
- S3 버킷 ARN을 지정하거나 동일한 계정에 있는 Kinesis Data Firehose에 전송할 수도 있음, 다른 계정에 있는 Firehose에도 전송할 수 있음
- Amazon S3 버킷을 생성하고, 버킷 ARN을 찾아 리소스 기반 정책이 자동으로 생성되고 타깃 버킷에 첨부되어 VPC 서비스는 데이터를 S3 버킷에 전송할 수 있음
- Create flow log로 로그 생성 가능
- 흐름 로그를 S3로 보내거나 CloudWatch Logs로 보낼 수 있음
- Athena를 사용해서 더 큰 분석을 할 수 있고,  Amazon S3를 사용
- Athena에서 Amazon S3의 쿼리 결과 위치를 설정해 저장할 S3 버킷을 선택할 수 있음
- 다른 구문을 실행
- Athena를 사용해서 Amazon S3에서  로그들을 쿼리하는 방법이 있음
