### AWS 예산 설정
- 계정에서 bill에서 설정

### EC2
- 서비스형 인프라 스트럭처
- EBS에 저장 가능
- ELB로 로드 분산 가
- ASG 오토 스케일링 그룹을 통해 서비스 확장
- 리눅스, 윈도우 aor dptj tkdyd rksmd
- CPU, RAM, 용량 선택 가능
- 하드웨어 연결 가능
- 네트워크 종류 선택 -> 속도, 어떤 IP
- 방화벽
- 부트 스트랩 스트립트
- 원하는 가상 머신을 선택해서 사용할 수 있음

### EC2 사용자 데이터
- 스트립트는 처음 시작할 때 
- 업데이트, 소프트웨어 설치 등
- 부팅 시 사용자 데이터를 root 로 실행 해서 sudo 사용

### EC2 생성
- EC2인스턴스에서 사용자 데이터를 통해 서버 실행

### EC2 인스턴스 유형
-  m5.2xlarge
	- m: instance class -> 범용 인스턴스
	- 5: generation
	- 2xlarge: size within the instance class -> 클수록 더 많은 메모리와 CPU를 가짐
- 범용 인스턴스: 웹 서버나 코드 저장소같은 다양한 작업에 적합
- 컴퓨팅 인스턴스:  컴퓨팅 서비스에 최적화 -> C로 시작
- 고성능 인스턴스 :  HPC 작업 및 게임 등
- 메모리 최적화 인스턴스: 대규모 메모리 처리, ram BI메모리 -> R로 시작 또는  Z
- 스토리지 최적화: 고주파 온라인 트랜잭션, Nosql, redis


### EC2 방화벽
- 트래픽 제어
- 보안 그룹임
- 보안 그룹 -> 출입 허용 규칙(IP 참조)
-  인바운드 : 외부에서 EC2 인스턴스로 들어옴
- 아웃바운드: EC2인스턴스에서 외부로 나감
- 제한
	- 포트 확인
	- IP확인
	- 인바운드 아웃바운드 확인
- 보안 그룹
	- 여러 인스턴스에 연결 가능
	- 지역과 VPC의 결합으로 둘 중 하나를 변경하면 새로 보안 그룹을 생성해야함
	- 보안 그룹은 EC2 외부에 있음 -> 외부 방화벽
	- **SSH 액세스를 위해 하나의 별도 보안 그룹을 유지하는 것을 권장
	- tiem out은 보안 그룹(방화벽)에서 막힌 것, connection refused는 방화벽은 통과했으나 어플리케이션 문제
	- 기본적으로 인바운드는 제한되고, 아웃바운드는 모두 허용됨
	![[Pasted image 20231024145751.png]]
	보안 그룹 1을 보안 그룹 1과 2의 권한이 있다면 IP는 신경쓰지 않고 EC2중 보안그룹 1과 2를 사용하는 인스턴스는 모두 접근 가능함
### SSH
- 22 포트: SSH 리눅스 인스턴스에 접속
- 21 포트: FTP 파일 공유 시 이용
- 22 포트: SFTP일 때 SSH를 사용해 업로그
- 80 포트: HTTP 일 때 보안이 되지 않은 사이트에 엑세스
- 443 포트: HTTPS 보안된 사이트 액세스
- 3389 포트: 원격 데스크톱 프로토콜인 RDP  포트 -> 윈도우 인스턴스에 로그인 할 때 사용

### SSH 개요
![[Pasted image 20231024150928.png]]
EC2 Instance Connect는 웹 브라우저로 EC2 인스턴스 연결

#### SSH
- 터미널이나 명령줄을 이용해 원격 머신이나 서버를 제어할 수 잇음
- pem키는 공백을 제거 후 원하는 디렉토리로 이동
-  /Users/yeon/jylim/12cm/pem/study/aws-course 
- ssh -i EC2Tutorial.pem ec2-user@43.201.8.206
- ssh 접속 후 aws configure에 액세스 키와 비밀번호를 입력하는 것은 최악
- IAM role을 추가하지 않으면 aws iam list-users가 작동하지 않음 
	-  Role 탭으로 들어가서 DemoRoleForEC2에서 IAMRead~~ 정책을 추가해주어야 명령어가 정상 작동
	- 위처럼 configure을 수정하는 것이 아니라 역할을 추가해주는 방식으로 유지보수 해야함


### EC2 인스턴스 시작
- 사용한 만큼(온 디멘드): 
	- 단기 워크로드를 사용
	- 애플리케이션의 거동을 예측할 수 없을 때 추천
	- 사용한 만큼 청구
- 예약 인스턴스를 사용할 경우 장기 워크로드 사용 가능
	- 시간이 지난 뒤 인스턴스 유형이 변경될 경우
	- 할인이 적용됨
	- 선결제, 부분 선결제 등이 있고 예약이라 할인이 됨
	- DB 같은 경우에 사용
	- 전환형 예약 -> 유연성이 있음
- 절약 플랜
	- 특정한 사용량으로 유지
	- 장기간 사용 시 할인
	- 1년 ~3년 
	- 사용 한도를 넘어서면 온디맨드로 청구
- 스팟 인스턴스: 단기성으로 사용하여 저렴하지만 신뢰성이 낮음
	- 가장 할인율이 큼
	- 비용이 넘어가게 되면 인스턴스가 삭제되기 때문에 비효율
	- 배치, 데이터분석, 이미지 처리, 등 분산형 워크로드에 적합
	- DB등에 적합하지 않음
- 전용 호스트: 물리적 서버 전체를 이용해서 하드웨어 공유하지 않음
	- 법규 준수 요건이 있음, 소켓, 코어 등
	- 라이선스와 함께 제공, BYOL
- dedicated: 
	- **전용 인스턴스와 호스트에 차이가 있음 -> 물리적 하드웨어
	- 전용 호스트는 물리적 서버에 대한 접근권을 갖음 낮은 수준의 하드웨어에 대한 가시성**
- 용량 예약: 원하는 기간동안 특정한 AZ에 용량을 예약할 수 있음
	- 기간 약정이 없음
	- 할인 없음
	- 단기적이고 중단 없는 워크로드에 적합


-- 다시 공부 아래
### 스팟 인스턴스 및 스팟 집합
- 온디맨드보다  저렴
- 사용자 정의 최대 가격보다 높아지면 인스턴스를 읽게됨
- 시간당 스팟
	- 용량이 넘어가면 인스턴스 중지
- 스팟 블록
	- 정해진 시간동안 블록을 차단

### 스팟 인스턴스 종료
- 요청 유형
	- 일회성: 스팟이 요청되면 바로 시작되고 스팟 요청은 사라짐
	- 영구 인스턴스 요청: 스팟 요청이 유효한 기간동안 계속 유지, 따라서 인스턴스가 중단되더라도 가격이 맞으면 다시 요청이 활성화 되어 인스턴스가 자동으로 살아남
- 스팟 요청이 종료된다고 인스턴스가 종료되는 것은 아님
	- 스팟요청을 취소하고 aws 인스턴스를 종료해야함 
		-그렇지 않으면 새로 계속해서 시작할 수 있음
### 스팟 플릿
- 스팟  인스턴스 세트를 지정
- 다양한 런치 풀 중 적합한 것을 선택
- **스팟 플릿 전략
	- 최저 가격
	 - 다양성
	 - 용량최적화
		 - 원하는 인스턴스에 맞게  큰것부터 작은것으로 사용
- **여러개의 런치를 사영할 수 있음, 최저가는 자동으로 낮은 비용을 선택**

